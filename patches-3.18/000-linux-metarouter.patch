Index: linux-3.18.43/arch/mips/include/asm/io.h
===================================================================
--- linux-3.18.43.orig/arch/mips/include/asm/io.h
+++ linux-3.18.43/arch/mips/include/asm/io.h
@@ -206,6 +206,7 @@ static inline void __iomem * __ioremap_m
 		if (!size || last_addr < phys_addr)
 			return NULL;
 
+#ifndef CONFIG_MAPPED_KERNEL
 		/*
 		 * Map uncached objects in the low 512MB of address
 		 * space using KSEG1.
@@ -214,6 +215,7 @@ static inline void __iomem * __ioremap_m
 		    flags == _CACHE_UNCACHED)
 			return (void __iomem *)
 				(unsigned long)CKSEG1ADDR(phys_addr);
+#endif
 	}
 
 	return __ioremap(offset, size, flags);
@@ -630,4 +632,41 @@ extern void (*_dma_cache_inv)(unsigned l
  */
 #define xlate_dev_kmem_ptr(p)	p
 
+#ifdef CONFIG_SOFT_PCI_IO
+
+unsigned _pci_inb(unsigned long port);
+unsigned _pci_inw(unsigned long port);
+unsigned _pci_inl(unsigned long port);
+void _pci_outb(unsigned char value, unsigned long port);
+void _pci_outw(unsigned short value, unsigned long port);
+void _pci_outl(unsigned value, unsigned long port);
+
+#define inb	_pci_inb
+#define inb_p	_pci_inb
+#define __mem_inb	_pci_inb
+#define __mem_inb_p	_pci_inb
+#define inw	_pci_inw
+#define inw_p	_pci_inw
+#define __mem_inw	_pci_inw
+#define __mem_inw_p	_pci_inw
+#define inl	_pci_inl
+#define inl_p	_pci_inl
+#define __mem_inl	_pci_inl
+#define __mem_inl_p	_pci_inl
+
+#define outb	_pci_outb
+#define outb_p	_pci_outb
+#define __mem_outb	_pci_outb
+#define __mem_outb_p	_pci_outb
+#define outw	_pci_outw
+#define outw_p	_pci_outw
+#define __mem_outw	_pci_outw
+#define __mem_outw_p	_pci_outw
+#define outl	_pci_outl
+#define outl_p	_pci_outl
+#define __mem_outl	_pci_outl
+#define __mem_outl_p	_pci_outl
+
+#endif
+
 #endif /* _ASM_IO_H */
Index: linux-3.18.43/arch/mips/include/asm/mach-rb/cpu-feature-overrides.h
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/include/asm/mach-rb/cpu-feature-overrides.h
@@ -0,0 +1,6 @@
+#ifndef __ASM_MACH_RB_CPU_FEATURE_OVERRIDES_H
+#define __ASM_MACH_RB_CPU_FEATURE_OVERRIDES_H
+
+#define cpu_has_dsp		0
+
+#endif /* __ASM_MACH_RB_CPU_FEATURE_OVERRIDES_H */
Index: linux-3.18.43/arch/mips/include/asm/mach-rb/irq.h
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/include/asm/mach-rb/irq.h
@@ -0,0 +1,16 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2003 by Ralf Baechle
+ */
+#ifndef __ASM_MACH_RB_IRQ_H
+#define __ASM_MACH_RBC_IRQ_H
+
+#define I8259A_IRQ_BASE 0
+#define MIPS_CPU_IRQ_BASE 0
+
+#define NR_IRQS	168
+
+#endif /* __ASM_MACH_RB_IRQ_H */
Index: linux-3.18.43/arch/mips/include/asm/mach-rb/kernel-entry-init.h
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/include/asm/mach-rb/kernel-entry-init.h
@@ -0,0 +1,44 @@
+#ifndef __ASM_MACH_RB_KERNEL_ENTRY_H
+#define __ASM_MACH_RB_KERNEL_ENTRY_H
+
+.macro	kernel_entry_setup
+#ifdef CONFIG_MAPPED_KERNEL
+	.set	push
+	.set	mips32r2
+	/* check whether we are running under 0xc0000000 address space */
+	lui	t0, 0xf000
+	bal	1f
+1:	and	t1, ra, t0
+	li	t0, 0xc0000000
+	beq	t0, t1, 2f
+	/* set up 0xc0000000 address space */
+	mtc0	t0, CP0_ENTRYHI
+	li	t0, 0x1f
+	mtc0	t0, CP0_ENTRYLO0
+	li	t0, 0x0010001f
+	mtc0	t0, CP0_ENTRYLO1
+	li	t0, PM_64M
+	mtc0	t0, CP0_PAGEMASK
+	li	t0, 0
+	mtc0	t0, CP0_INDEX
+	li	t0, 2
+	mtc0	t0, CP0_WIRED
+	ehb
+	tlbwi
+
+	li	t0, 0xc8000000
+	mtc0	t0, CP0_ENTRYHI
+	li	t0, 0x0020001f
+	mtc0	t0, CP0_ENTRYLO0
+	li	t0, 0x0030001f
+	mtc0	t0, CP0_ENTRYLO1
+	li	t0, 1
+	mtc0	t0, CP0_INDEX
+	ehb
+	tlbwi
+2:
+	.set	pop
+#endif
+.endm
+
+#endif
Index: linux-3.18.43/arch/mips/include/asm/mach-rb/kmalloc.h
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/include/asm/mach-rb/kmalloc.h
@@ -0,0 +1,4 @@
+#ifndef __ASM_MACH_RB_KMALLOC_H
+#define __ASM_MACH_RB_KMALLOC_H
+
+#endif
Index: linux-3.18.43/arch/mips/include/asm/mach-rb/mangle-port.h
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/include/asm/mach-rb/mangle-port.h
@@ -0,0 +1,36 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2003, 2004 Ralf Baechle
+ */
+#ifndef __ASM_MACH_GENERIC_MANGLE_PORT_H
+#define __ASM_MACH_GENERIC_MANGLE_PORT_H
+
+#ifdef CONFIG_CPU_LITTLE_ENDIAN
+
+#define __swizzle_addr_b(port)	(port)
+#define __swizzle_addr_w(port)	(port)
+#define __swizzle_addr_l(port)	(port)
+#define __swizzle_addr_q(port)	(port)
+
+#else
+
+#define __swizzle_addr_b(port)  ((port) ^ 3)
+#define __swizzle_addr_w(port)  ((port) ^ 2)
+#define __swizzle_addr_l(port)  (port)
+#define __swizzle_addr_q(port)  (port)
+
+#endif
+
+#define ioswabb(a,x)		(x)
+#define __mem_ioswabb(a,x)	(x)
+#define ioswabw(a,x)		(x)
+#define __mem_ioswabw(a,x)	cpu_to_le16(x)
+#define ioswabl(a,x)		(x)
+#define __mem_ioswabl(a,x)	cpu_to_le32(x)
+#define ioswabq(a,x)		(x)
+#define __mem_ioswabq(a,x)	cpu_to_le32(x)
+
+#endif /* __ASM_MACH_GENERIC_MANGLE_PORT_H */
Index: linux-3.18.43/arch/mips/include/asm/mach-rb/spaces.h
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/include/asm/mach-rb/spaces.h
@@ -0,0 +1,30 @@
+#ifndef _ASM_MACH_RB_SPACES_H
+#define _ASM_MACH_RB_SPACES_H
+
+#include <linux/const.h>
+
+#define PHYS_OFFSET		_AC(0, UL)
+
+#ifdef CONFIG_MAPPED_KERNEL
+#define CAC_BASE		_AC(0xc0000000, UL)
+#else
+#define CAC_BASE		_AC(0x80000000, UL)
+#endif
+#define IO_BASE			_AC(0xa0000000, UL)
+#define UNCAC_BASE		_AC(0xa0000000, UL)
+
+#ifndef MAP_BASE
+#define MAP_BASE		_AC(0xd0000000, UL)
+#endif
+
+#define HIGHMEM_START		_AC(0x20000000, UL)
+
+#define PAGE_OFFSET		(CAC_BASE + PHYS_OFFSET)
+
+#ifndef CONFIG_MAPPED_KERNEL
+#define FIXADDR_TOP		((unsigned long)(long)(int)0xfffe0000)
+#else
+#define FIXADDR_TOP		((unsigned long)(long)(int)0xdffe0000)
+#endif
+
+#endif
Index: linux-3.18.43/arch/mips/include/asm/mach-rb/war.h
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/include/asm/mach-rb/war.h
@@ -0,0 +1,18 @@
+#ifndef __ASM_MIPS_MACH_RB_WAR_H
+#define __ASM_MIPS_MACH_RB_WAR_H
+
+#define R4600_V1_INDEX_ICACHEOP_WAR	0
+#define R4600_V1_HIT_CACHEOP_WAR	0
+#define R4600_V2_HIT_CACHEOP_WAR	0
+#define R5432_CP0_INTERRUPT_WAR		0
+#define BCM1250_M3_WAR			0
+#define SIBYTE_1956_WAR			0
+#define MIPS4K_ICACHE_REFILL_WAR	0
+#define MIPS_CACHE_SYNC_WAR		0
+#define TX49XX_ICACHE_INDEX_INV_WAR	0
+#define RM9000_CDEX_SMP_WAR		0
+#define ICACHE_REFILLS_WORKAROUND_WAR   0
+#define R10000_LLSC_WAR			0
+#define MIPS34K_MISSED_ITLB_WAR		0
+
+#endif
Index: linux-3.18.43/arch/mips/include/asm/rb/boards.h
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/include/asm/rb/boards.h
@@ -0,0 +1,66 @@
+#ifndef _ASM_RB_BOARDS_H
+#define _ASM_RB_BOARDS_H
+
+#define MACH_GROUP_MT_RB500    1	/* Mikrotik RB500 */
+#define MACH_GROUP_MT_RB100    2	/* Mikrotik RB100 */
+#define MACH_GROUP_MT_CR       3	/* Mikrotik CR */
+#define MACH_GROUP_MT_RB400    4
+#define MACH_GROUP_MT_VM       6
+#define MACH_GROUP_MT_RB700    7
+
+
+#define  MACH_MT_RB500		0
+#define  MACH_MT_RB500R5	1
+#define  MACH_MT_RB100		2
+#define  MACH_MT_RB150		3
+#define  MACH_MT_RB133		4
+#define  MACH_MT_RB133C		5
+#define  MACH_MT_MR		6
+#define  MACH_MT_RB192		7
+#define  MACH_MT_CR1		8
+#define  MACH_MT_RB411		10
+#define  MACH_MT_RB433		11
+#define  MACH_MT_RB433U		12	/* RB433 + USB */
+#define  MACH_MT_RB450		13
+#define  MACH_MT_RB493		15
+#define  MACH_MT_RB450G		16
+#define  MACH_MT_RB411U		17
+#define  MACH_MT_RB493G		18
+#define  MACH_MT_RB750G		19
+#define  MACH_MT_RB435G		20
+#define  MACH_MT_RB750		23
+#define  MACH_MT_RB711		24
+#define  MACH_MT_RB_OMNI	25
+#define  MACH_MT_RB_SXT5D	26
+#define  MACH_MT_RB_GROOVE	27
+#define  MACH_MT_RB_OMNI_5FE	28	/* OmniTIK U-5HnD */
+#define  MACH_MT_RB711R3	29
+#define  MACH_MT_RB751G		30
+#define  MACH_MT_RB711G		31
+#define  MACH_MT_RB411L		33
+#define  MACH_MT_RB750GL	35
+#define  MACH_MT_RB411G		36
+#define  MACH_MT_RB951		37
+#define  MACH_MT_GROOVE52	38
+#define  MACH_MT_RB2011G	39
+#define  MACH_MT_RB912G		40
+#define  MACH_MT_RB433GL	41
+#define  MACH_MT_RB433UL	42
+#define  MACH_MT_RB_SXTG	43
+#define  MACH_MT_RB751		44
+#define  MACH_MT_RB_GROOVE_5S	45
+#define  MACH_MT_RB433L		46
+#define  MACH_MT_RB411UL	47
+#define  MACH_MT_RB2011L	49
+#define  MACH_MT_RB2011LS	50
+#define  MACH_MT_RB951G		52
+#define  MACH_MT_RB2011US	53
+#define  MACH_MT_SXT2D		58
+#define  MACH_MT_SXT5N		59
+#define  MACH_MT_RB2011R5	61
+#define  MACH_MT_CRS125G	63
+
+extern unsigned long mips_machgroup;
+extern unsigned long mips_machtype;
+
+#endif
Index: linux-3.18.43/arch/mips/include/asm/rb/booter.h
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/include/asm/rb/booter.h
@@ -0,0 +1,19 @@
+#ifndef _ASM_BOOTER_H
+#define _ASM_BOOTER_H
+
+#define ID_HW_OPTIONS		0x00000015
+
+#define HW_OPT_UART_ABSENT	(1 << 0)
+#define HW_OPT_HAS_VOLTAGE	(1 << 1)
+#define HW_OPT_HAS_USB		(1 << 2)
+#define HW_OPT_HAS_ATTINY	(1 << 3)
+#define HW_OPT_NO_NAND		(1 << 14)
+#define HW_OPT_HAS_LCD		(1 << 15)
+#define HW_OPT_HAS_POE_OUT	(1 << 16)
+#define HW_OPT_HAS_uSD		(1 << 17)
+#define HW_OPT_HAS_SFP		(1 << 20)
+#define HW_OPT_HAS_WIFI		(1 << 21)
+
+int read_booter_cfg(unsigned id, void *buf, int amount);
+
+#endif
Index: linux-3.18.43/arch/mips/include/asm/string.h
===================================================================
--- linux-3.18.43.orig/arch/mips/include/asm/string.h
+++ linux-3.18.43/arch/mips/include/asm/string.h
@@ -108,8 +108,9 @@ strncmp(__const__ char *__cs, __const__
 	__asm__ __volatile__(
 	".set\tnoreorder\n\t"
 	".set\tnoat\n"
-	"1:\tlbu\t%3,(%0)\n\t"
-	"beqz\t%2,2f\n\t"
+	"1:\tbeqz\t%2,2f\n\t"
+	"nop\n\t"
+	"lbu\t%3,(%0)\n\t"
 	"lbu\t$1,(%1)\n\t"
 	"subu\t%2,1\n\t"
 	"bne\t$1,%3,3f\n\t"
Index: linux-3.18.43/arch/mips/include/asm/vm.h
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/include/asm/vm.h
@@ -0,0 +1,43 @@
+#ifndef MT_VM_H
+#define MT_VM_H
+
+#define VIRQ_BASE	64
+
+#define hypercall(name, nr, ...)		\
+	asm(					\
+		".global " #name ";"		\
+		".align 2;"			\
+		".set	push;"			\
+		".set	noreorder;"		\
+		".type " #name ",@function;"	\
+		".ent " #name ",0;"		\
+		#name ": .frame $sp,0,$ra;"	\
+		"li $3, " #nr ";"		\
+		"li $2, -22;"			\
+		"mtc0 $0, $1;"			\
+		"jr $ra;"			\
+		"nop;"				\
+		".end " #name ";"		\
+		".size " #name ",.-" #name ";"	\
+		".set	pop"			\
+        );					\
+	asmlinkage extern int name(__VA_ARGS__);
+
+/* NOTE: do not allow vdma_descr to span multiple pages, so align it */
+struct vdma_descr {
+	unsigned addr;
+	unsigned size;
+	unsigned next;
+} __attribute__((aligned(16)));
+
+#define DONE		0x80000000
+
+static inline unsigned get_virq_nr(unsigned hwirq)
+{
+	return VIRQ_BASE + hwirq;
+}
+
+extern int vm_running(void);
+#define hc_yield() asm volatile ("wait")
+
+#endif
Index: linux-3.18.43/arch/mips/Kbuild.platforms
===================================================================
--- linux-3.18.43.orig/arch/mips/Kbuild.platforms
+++ linux-3.18.43/arch/mips/Kbuild.platforms
@@ -30,6 +30,7 @@ platforms += sibyte
 platforms += sni
 platforms += txx9
 platforms += vr41xx
+platforms += rb
 
 # include the platform specific files
 include $(patsubst %, $(srctree)/arch/mips/%/Platform, $(platforms))
Index: linux-3.18.43/arch/mips/Kconfig
===================================================================
--- linux-3.18.43.orig/arch/mips/Kconfig
+++ linux-3.18.43/arch/mips/Kconfig
@@ -723,6 +723,23 @@ config MIKROTIK_RB532
 	  Support the Mikrotik(tm) RouterBoard 532 series,
 	  based on the IDT RC32434 SoC.
 
+config MIPS_MIKROTIK
+	bool "Support for Mikrotik RB boards"
+	select CEVT_R4K
+	select CSRC_R4K
+	select DMA_NONCOHERENT
+	select HW_HAS_PCI
+	select IRQ_CPU
+	select SYS_HAS_CPU_MIPS32_R1
+	select SYS_HAS_CPU_MIPS32_R2
+	select SYS_SUPPORTS_LITTLE_ENDIAN
+	select SYS_SUPPORTS_BIG_ENDIAN
+	select SYS_SUPPORTS_32BIT_KERNEL
+	select ZONE_DMA
+	select ARCH_REQUIRE_GPIOLIB
+	help
+	  Say Y here to support all Mikrotik mips based routerboards
+
 config CAVIUM_OCTEON_SOC
 	bool "Cavium Networks Octeon SoC based boards"
 	select CEVT_R4K
@@ -834,6 +851,14 @@ config MIPS_PARAVIRT
 
 endchoice
 
+config SOFT_PCI_IO
+	bool "PCI IO software emulation on RB4xx"
+	depends on MIPS_MIKROTIK
+
+config MAPPED_KERNEL
+	bool "Mapped kernel support"
+	depends on MIPS_MIKROTIK
+
 source "arch/mips/alchemy/Kconfig"
 source "arch/mips/ath79/Kconfig"
 source "arch/mips/bcm47xx/Kconfig"
@@ -1162,6 +1187,7 @@ config MIPS_L1_CACHE_SHIFT
 	default "5" if MIPS_L1_CACHE_SHIFT_5
 	default "6" if MIPS_L1_CACHE_SHIFT_6
 	default "7" if MIPS_L1_CACHE_SHIFT_7
+	default "4" if MIPS_MIKROTIK
 	default "5"
 
 config HAVE_STD_PC_SERIAL_PORT
@@ -1240,7 +1266,7 @@ config CPU_LOONGSON1B
 config CPU_MIPS32_R1
 	bool "MIPS32 Release 1"
 	depends on SYS_HAS_CPU_MIPS32_R1
-	select CPU_HAS_PREFETCH
+#	select CPU_HAS_PREFETCH
 	select CPU_SUPPORTS_32BIT_KERNEL
 	select CPU_SUPPORTS_HIGHMEM
 	help
@@ -1257,7 +1283,7 @@ config CPU_MIPS32_R1
 config CPU_MIPS32_R2
 	bool "MIPS32 Release 2"
 	depends on SYS_HAS_CPU_MIPS32_R2
-	select CPU_HAS_PREFETCH
+#	select CPU_HAS_PREFETCH
 	select CPU_SUPPORTS_32BIT_KERNEL
 	select CPU_SUPPORTS_HIGHMEM
 	select CPU_SUPPORTS_MSA
Index: linux-3.18.43/arch/mips/kernel/backtrace.c
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/kernel/backtrace.c
@@ -0,0 +1,156 @@
+#include <linux/module.h>
+#include <linux/oprofile.h>
+#include <linux/mm.h>
+#include <asm/page.h>
+#include <asm/processor.h>
+#include <asm/uaccess.h>
+
+#define INSTR_JR_RA	0x03e00008
+#define INSTR_JRHB_RA	0x03e00408
+#define INSTR_ADDIU_SP	0x241d0000
+#define INSTR_SW_RA_SP	0xafbf0000
+#define INSTR_MOVE_RA_ZERO	0x0000f821
+#define REGS_MASK	0x03e00000
+#define IMM16_MASK	0x0000ffff
+
+#define REG_SP		29
+#define TO_REGS(x)	((x) << 21)
+
+static inline int fetch_u32(void *val, void *ptr, int usermode)
+{
+	if (((unsigned) ptr & 3) != 0)
+		return -EFAULT;
+
+	if (usermode)
+		return get_user(*(unsigned *) val, (unsigned *) ptr);
+
+	if (KSEGX(ptr) == KSEG3)
+		return __get_user(*(unsigned *) val, (unsigned *) ptr);
+
+	if (KSEGX(ptr) != KSEG0 && KSEGX(ptr) != KSEG2)
+		return -EFAULT;
+
+	if ((unsigned long) ptr < PAGE_OFFSET)
+		return -EFAULT;
+	if ((unsigned long) ptr  > (unsigned long) high_memory)
+		return -EFAULT;
+
+	return __get_user(*(unsigned *) val, (unsigned *) ptr);
+}
+
+static inline int is_bcond(unsigned i)
+{
+    unsigned c = (i >> 26) & 7;
+    switch (i >> 29) {
+    case 0:
+	if (c == 1)
+	    return (i & (1 << 19)) == 0;
+	/* fall trough */
+    case 2:
+	return c >= 4;
+    }
+    return 0;
+}
+
+static inline unsigned *find_prev_branch(unsigned *instr, unsigned *limit,
+					 int usermode)
+{
+    unsigned i = 0;
+    unsigned *target = instr;
+
+    for (--instr; instr > limit; --instr) {
+	if (fetch_u32(&i, instr, usermode))
+	    return 0;
+
+	if (is_bcond(i)) {
+	    if (instr + 1 + (short) i == target) {
+		return instr;
+	    }
+	} else if ((i & ~(IMM16_MASK | REGS_MASK)) == INSTR_ADDIU_SP) {
+	    if ((i & REGS_MASK) != TO_REGS(REG_SP)) {
+		/* not simple sp adjustment, probably switching stack here */
+		return 0;
+	    }
+	    /* check if frame start has been hit */
+	    if ((short) (i & IMM16_MASK) < 0) {
+		return 0;
+	    }
+	}
+    }
+    return 0;
+}
+
+unsigned long find_prev_frame(unsigned long pc, unsigned long ra,
+			      unsigned long *sp, int usermode)
+{
+    int storedRA = -1;
+    int frameSize = 0;
+    unsigned *instr;
+    unsigned *limit = (unsigned *) (pc - 4096);
+    unsigned i = 0;
+    int imm;
+
+    if (!fetch_u32(&i, (unsigned *) pc, usermode)) {
+	if ((i & ~(IMM16_MASK | REGS_MASK)) == INSTR_ADDIU_SP
+	    && (short) (i & IMM16_MASK) < 0) {
+	    /* we are at the beging of function, reserving stack */
+	    return ra;
+	}
+    }
+
+    for (instr = (unsigned *) pc - 1; instr > limit; --instr) {
+	if (fetch_u32(&i, instr, usermode))
+	    break;
+
+	if (i == INSTR_JR_RA || i == INSTR_JRHB_RA) {
+	    /* found prev func end */
+	    break;
+	} else if ((i & ~IMM16_MASK) == INSTR_SW_RA_SP) {
+	    /* remember where previous RA was stored */
+	    storedRA = (short) (i & IMM16_MASK);
+	} else if ((i & ~(IMM16_MASK | REGS_MASK)) == INSTR_ADDIU_SP) {
+	    if ((i & REGS_MASK) != TO_REGS(REG_SP)) {
+		/* not simple sp adjustment, probably switching stack here */
+		return 0;
+	    }
+
+	    imm = (short) (i & IMM16_MASK);
+	    if (imm >= 0) {
+		/* found prev func end (poping back stack frame),
+		   or end of our own func in other of it's threads (chunks) */
+		if (storedRA != -1)
+		    break;
+
+		instr = find_prev_branch(instr + 1, limit, usermode);
+		if (instr == 0) {
+		    /* no branch to us was found,
+		       it means we are at the begining of the frame */
+		    break;
+		}
+	    } else {
+		frameSize = -imm;
+		break;
+	    }
+	} else if (i == INSTR_MOVE_RA_ZERO) {
+	    /* we have come to the end of the world,
+	       __start() func sets up RA wrongly */
+	    return 0;
+	}
+    }
+
+    if (frameSize > 0) {
+	/* if we hit addiu sp,-X first, we have stack frame */
+
+	if (storedRA != -1) {
+	    if (fetch_u32(&ra, (char *) *sp + storedRA, usermode))
+		return 0;
+	    if (ra == 0)
+		return 0;
+	}
+	*sp += frameSize;
+	return ra;
+    }
+    return ra;
+}
+
+EXPORT_SYMBOL(find_prev_frame);
Index: linux-3.18.43/arch/mips/kernel/cevt-r4k.c
===================================================================
--- linux-3.18.43.orig/arch/mips/kernel/cevt-r4k.c
+++ linux-3.18.43/arch/mips/kernel/cevt-r4k.c
@@ -11,6 +11,7 @@
 #include <linux/percpu.h>
 #include <linux/smp.h>
 #include <linux/irq.h>
+#include <linux/kernel.h>
 
 #include <asm/time.h>
 #include <asm/cevt-r4k.h>
@@ -97,6 +98,14 @@ static int c0_compare_int_pending(void)
  * so wait up to worst case number of cycle counter ticks for timer interrupt
  * changes to propagate to the cause register.
  */
+#define back_to_back_c0_hazard4() \
+	do { \
+		back_to_back_c0_hazard(); \
+		back_to_back_c0_hazard(); \
+		back_to_back_c0_hazard(); \
+		back_to_back_c0_hazard(); \
+	} while (0)
+
 #define COMPARE_INT_SEEN_TICKS 50
 
 int c0_compare_int_usable(void)
@@ -108,13 +117,15 @@ int c0_compare_int_usable(void)
     return 1;
 #endif
 
+	printk(KERN_WARNING "Anyway, a printk works...\n");
+
 	/*
 	 * IP7 already pending?	 Try to clear it by acking the timer.
 	 */
 	if (c0_compare_int_pending()) {
 		cnt = read_c0_count();
 		write_c0_compare(cnt);
-		back_to_back_c0_hazard();
+		back_to_back_c0_hazard4();
 		while (read_c0_count() < (cnt  + COMPARE_INT_SEEN_TICKS))
 			if (!c0_compare_int_pending())
 				break;
@@ -126,7 +137,7 @@ int c0_compare_int_usable(void)
 		cnt = read_c0_count();
 		cnt += delta;
 		write_c0_compare(cnt);
-		back_to_back_c0_hazard();
+		back_to_back_c0_hazard4();
 		if ((int)(read_c0_count() - cnt) < 0)
 		    break;
 		/* increase delta if the timer was already expired */
@@ -142,7 +153,7 @@ int c0_compare_int_usable(void)
 		return 0;
 	cnt = read_c0_count();
 	write_c0_compare(cnt);
-	back_to_back_c0_hazard();
+	back_to_back_c0_hazard4();
 	while (read_c0_count() < (cnt + COMPARE_INT_SEEN_TICKS))
 		if (!c0_compare_int_pending())
 			break;
Index: linux-3.18.43/arch/mips/kernel/head.S
===================================================================
--- linux-3.18.43.orig/arch/mips/kernel/head.S
+++ linux-3.18.43/arch/mips/kernel/head.S
@@ -86,7 +86,7 @@ EXPORT(__image_cmdline)
 	.fill	0x400
 #endif /* CONFIG_IMAGE_CMDLINE_HACK */
 
-	__REF
+	__HEAD
 
 NESTED(kernel_entry, 16, sp)			# kernel entry point
 
Index: linux-3.18.43/arch/mips/kernel/Makefile
===================================================================
--- linux-3.18.43.orig/arch/mips/kernel/Makefile
+++ linux-3.18.43/arch/mips/kernel/Makefile
@@ -5,7 +5,7 @@
 extra-y		:= head.o vmlinux.lds
 
 obj-y		+= cpu-probe.o branch.o entry.o genex.o idle.o irq.o process.o \
-		   prom.o ptrace.o reset.o setup.o signal.o syscall.o \
+		   prom.o ptrace.o reset.o setup.o signal.o syscall.o backtrace.o \
 		   time.o topology.o traps.o unaligned.o watch.o vdso.o
 
 ifdef CONFIG_FUNCTION_TRACER
Index: linux-3.18.43/arch/mips/kernel/module.c
===================================================================
--- linux-3.18.43.orig/arch/mips/kernel/module.c
+++ linux-3.18.43/arch/mips/kernel/module.c
@@ -30,6 +30,7 @@
 #include <linux/string.h>
 #include <linux/kernel.h>
 #include <linux/spinlock.h>
+#include <linux/mm.h>
 #include <linux/jump_label.h>
 
 #include <asm/pgtable.h>	/* MODULE_START */
@@ -183,7 +184,10 @@ static inline bool is_phys_addr(void *pt
 #ifdef CONFIG_64BIT
 	return (KSEGX((unsigned long)ptr) == CKSEG0);
 #else
-	return (KSEGX(ptr) == KSEG0);
+	unsigned addr = (unsigned) ptr;
+	return addr && (addr < VMALLOC_START || addr > VMALLOC_END);
+//	return (KSEGX(ptr) == KSEG0);
+
 #endif
 }
 
Index: linux-3.18.43/arch/mips/kernel/proc.c
===================================================================
--- linux-3.18.43.orig/arch/mips/kernel/proc.c
+++ linux-3.18.43/arch/mips/kernel/proc.c
@@ -13,6 +13,7 @@
 #include <asm/idle.h>
 #include <asm/mipsregs.h>
 #include <asm/processor.h>
+#include <asm/time.h>
 #include <asm/prom.h>
 
 unsigned int vced_count, vcei_count;
@@ -36,6 +37,7 @@ static int show_cpuinfo(struct seq_file
 {
 	struct proc_cpuinfo_notifier_args proc_cpuinfo_notifier_args;
 	unsigned long n = (unsigned long) v - 1;
+	unsigned cpu_khz = mips_hpt_frequency / 500;
 	unsigned int version = cpu_data[n].processor_id;
 	unsigned int fp_vers = cpu_data[n].fpu_id;
 	char fmt [64];
@@ -62,6 +64,8 @@ static int show_cpuinfo(struct seq_file
 	seq_printf(m, fmt, __cpu_name[n],
 		      (version >> 4) & 0x0f, version & 0x0f,
 		      (fp_vers >> 4) & 0x0f, fp_vers & 0x0f);
+	seq_printf(m, "cpu MHz\t\t\t: %u.%03u\n",
+		   cpu_khz / 1000, (cpu_khz % 1000));
 	seq_printf(m, "BogoMIPS\t\t: %u.%02u\n",
 		      cpu_data[n].udelay_val / (500000/HZ),
 		      (cpu_data[n].udelay_val / (5000/HZ)) % 100);
Index: linux-3.18.43/arch/mips/kernel/time.c
===================================================================
--- linux-3.18.43.orig/arch/mips/kernel/time.c
+++ linux-3.18.43/arch/mips/kernel/time.c
@@ -70,6 +70,7 @@ EXPORT_SYMBOL(perf_irq);
  */
 
 unsigned int mips_hpt_frequency;
+EXPORT_SYMBOL(mips_hpt_frequency);
 
 /*
  * This function exists in order to cause an error due to a duplicate
Index: linux-3.18.43/arch/mips/kernel/traps.c
===================================================================
--- linux-3.18.43.orig/arch/mips/kernel/traps.c
+++ linux-3.18.43/arch/mips/kernel/traps.c
@@ -100,6 +100,8 @@ void (*board_bind_eic_interrupt)(int irq
 void (*board_ebase_setup)(void);
 void(*board_cache_error_setup)(void);
 
+#define CONFIG_RAWBACKTRACE
+#ifdef CONFIG_RAWBACKTRACE
 static void show_raw_backtrace(unsigned long reg29)
 {
 	unsigned long *sp = (unsigned long *)(reg29 & ~3);
@@ -153,6 +155,25 @@ static void show_backtrace(struct task_s
 	printk("\n");
 }
 
+#else
+
+static void show_backtrace(struct task_struct *task, const struct pt_regs *regs)
+{
+	unsigned long sp = regs->regs[29];
+	unsigned long ra = regs->regs[31];
+	unsigned long pc = regs->cp0_epc;
+	int depth = 16;
+
+	printk("Call Trace:\n");
+	while (depth-- && pc) {
+	    print_ip_sym(pc);
+	    pc = find_prev_frame(pc, ra, &sp, 0);
+	    ra = 0;
+	}
+	printk("\n");
+}
+#endif
+
 /*
  * This routine abuses get_user()/put_user() to reference pointers
  * with at least a bit of error checking ...
@@ -386,6 +407,7 @@ void __noreturn die(const char *str, str
 		       SIGSEGV) == NOTIFY_STOP)
 		sig = 0;
 
+	oops_enter();
 	console_verbose();
 	raw_spin_lock_irq(&die_lock);
 	bust_spinlocks(1);
@@ -1743,7 +1765,7 @@ void __init *set_except_vector(int n, vo
 #endif
 		u32 *buf = (u32 *)(ebase + 0x200);
 		unsigned int k0 = 26;
-		if ((handler & jump_mask) == ((ebase + 0x200) & jump_mask)) {
+		if ((handler & jump_mask) == ((KSEG0ADDR(ebase) + 0x200) & jump_mask)) {
 			uasm_i_j(&buf, handler & ~jump_mask);
 			uasm_i_nop(&buf);
 		} else {
@@ -1961,6 +1983,7 @@ void per_cpu_trap_init(bool is_boot_cpu)
 	 *  o read IntCtl.IPTI to determine the timer interrupt
 	 *  o read IntCtl.IPPCI to determine the performance counter interrupt
 	 */
+#ifdef CONFIG_CPU_MIPSR2
 	if (cpu_has_mips_r2) {
 		cp0_compare_irq_shift = CAUSEB_TI - CAUSEB_IP;
 		cp0_compare_irq = (read_c0_intctl() >> INTCTLB_IPTI) & 7;
@@ -1968,11 +1991,17 @@ void per_cpu_trap_init(bool is_boot_cpu)
 		if (cp0_perfcount_irq == cp0_compare_irq)
 			cp0_perfcount_irq = -1;
 	} else {
+#endif
 		cp0_compare_irq = CP0_LEGACY_COMPARE_IRQ;
 		cp0_compare_irq_shift = CP0_LEGACY_PERFCNT_IRQ;
 		cp0_perfcount_irq = -1;
+#ifdef CONFIG_CPU_MIPSR2
 	}
+#endif
 
+#ifdef CONFIG_MIPS_MIKROTIK
+	cp0_compare_irq = CP0_LEGACY_COMPARE_IRQ;
+#endif
 	if (!cpu_data[cpu].asid_cache)
 		cpu_data[cpu].asid_cache = ASID_FIRST_VERSION;
 
@@ -2050,7 +2079,7 @@ void __init trap_init(void)
 #define KVM_GUEST_KSEG0     0x40000000
         ebase = KVM_GUEST_KSEG0;
 #else
-        ebase = CKSEG0;
+        ebase = CAC_BASE;
 #endif
 		if (cpu_has_mips_r2)
 			ebase += (read_c0_ebase() & 0x3ffff000);
Index: linux-3.18.43/arch/mips/kernel/unaligned.c
===================================================================
--- linux-3.18.43.orig/arch/mips/kernel/unaligned.c
+++ linux-3.18.43/arch/mips/kernel/unaligned.c
@@ -108,6 +108,24 @@ static u32 unaligned_action;
 #endif
 extern void show_registers(struct pt_regs *regs);
 
+#define RATE_BURST (10*5*HZ)
+#define RATE_COST (5*HZ)
+
+static int un_ratelimit(void) {
+	static unsigned toks = RATE_BURST;
+	static unsigned last_msg;
+
+	unsigned now = jiffies;
+	toks += now - last_msg;
+	if (toks > RATE_BURST) toks = RATE_BURST;
+
+	if (toks >= RATE_COST) {
+		toks -= RATE_COST;
+		return 1;
+	}
+	return 0;
+}
+
 #ifdef __BIG_ENDIAN
 #define     LoadHW(addr, value, res)  \
 		__asm__ __volatile__ (".set\tnoat\n"        \
@@ -1635,11 +1653,23 @@ sigill:
 	force_sig(SIGILL, current);
 }
 
+extern asmlinkage void do_page_fault(struct pt_regs *regs, unsigned long write,
+				     unsigned long address);
+
 asmlinkage void do_ade(struct pt_regs *regs)
 {
 	enum ctx_state prev_state;
-	unsigned int __user *pc;
+	unsigned int __user *pc = NULL;
 	mm_segment_t seg;
+	unsigned long badvaddr = regs->cp0_badvaddr;
+
+	/* We are running in VM protected enviroment and
+	   we hit KSEG0, or KSEG3 address */
+	if ((badvaddr & 3) == 0 && KSEGX(badvaddr) == KSEG3) {
+		do_page_fault(regs, (regs->cp0_cause & 0x7c) == 20,
+			      badvaddr);
+		return;
+	}
 
 	prev_state = exception_enter();
 	perf_sw_event(PERF_COUNT_SW_ALIGNMENT_FAULTS,
@@ -1655,6 +1685,10 @@ asmlinkage void do_ade(struct pt_regs *r
 	if (unaligned_action == UNALIGNED_ACTION_SIGNAL)
 		goto sigbus;
 
+	if (!user_mode(regs) && un_ratelimit())
+		printk(KERN_WARNING "unaligned data access %lx at %p %pS\n",
+			badvaddr, pc, (void *)pc);
+
 	/*
 	 * Do branch emulation only if we didn't forward the exception.
 	 * This is all so but ugly ...
Index: linux-3.18.43/arch/mips/kernel/vmlinux.lds.S
===================================================================
--- linux-3.18.43.orig/arch/mips/kernel/vmlinux.lds.S
+++ linux-3.18.43/arch/mips/kernel/vmlinux.lds.S
@@ -51,6 +51,7 @@ SECTIONS
 	/* read-only */
 	_text = .;	/* Text and read-only data */
 	.text : {
+	        HEAD_TEXT
 		TEXT_TEXT
 		SCHED_TEXT
 		LOCK_TEXT
Index: linux-3.18.43/arch/mips/lib/iomap.c
===================================================================
--- linux-3.18.43.orig/arch/mips/lib/iomap.c
+++ linux-3.18.43/arch/mips/lib/iomap.c
@@ -25,6 +25,8 @@
 
 #define PIO_MASK	0x0ffffUL
 
+//#ifndef CONFIG_MIPS_MIKROTIK
+
 unsigned int ioread8(void __iomem *addr)
 {
 	return readb(addr);
@@ -194,6 +196,8 @@ void iowrite32_rep(void __iomem *addr, c
 
 EXPORT_SYMBOL(iowrite32_rep);
 
+//#endif
+
 /*
  * Create a virtual mapping cookie for an IO port range
  *
Index: linux-3.18.43/arch/mips/mm/c-r4k.c
===================================================================
--- linux-3.18.43.orig/arch/mips/mm/c-r4k.c
+++ linux-3.18.43/arch/mips/mm/c-r4k.c
@@ -1183,7 +1183,9 @@ static void probe_pcache(void)
 			      c->dcache.linesz;
 		c->dcache.waybit = __ffs(dcache_size/c->dcache.ways);
 
+#ifdef CONFIG_CPU_HAS_PREFETCH
 		c->options |= MIPS_CPU_PREFETCH;
+#endif
 		break;
 	}
 
Index: linux-3.18.43/arch/mips/mm/dma-default.c
===================================================================
--- linux-3.18.43.orig/arch/mips/mm/dma-default.c
+++ linux-3.18.43/arch/mips/mm/dma-default.c
@@ -14,6 +14,10 @@
 #include <linux/module.h>
 #include <linux/scatterlist.h>
 #include <linux/string.h>
+#ifdef CONFIG_MAPPED_KERNEL
+#include <linux/hardirq.h>
+#include <linux/sched.h>
+#endif
 #include <linux/gfp.h>
 #include <linux/highmem.h>
 #include <linux/dma-contiguous.h>
@@ -53,11 +57,9 @@ static gfp_t massage_gfp_flags(const str
 	/* ignore region specifiers */
 	gfp &= ~(__GFP_DMA | __GFP_DMA32 | __GFP_HIGHMEM);
 
-#ifdef CONFIG_ISA
 	if (dev == NULL)
 		dma_flag = __GFP_DMA;
 	else
-#endif
 #if defined(CONFIG_ZONE_DMA32) && defined(CONFIG_ZONE_DMA)
 	     if (dev->coherent_dma_mask < DMA_BIT_MASK(32))
 			dma_flag = __GFP_DMA;
@@ -128,8 +130,15 @@ void *mips_dma_alloc_coherent(struct dev
 	*dma_handle = plat_map_dma_mem(dev, ret, size);
 	if (!plat_device_is_coherent(dev)) {
 		dma_cache_wback_inv((unsigned long) ret, size);
+#ifndef CONFIG_MAPPED_KERNEL
 		if (!hw_coherentio)
 			ret = UNCAC_ADDR(ret);
+#else
+		if (!in_interrupt())
+			ret = ioremap((unsigned long) *dma_handle, size);
+		else
+			ret = UNCAC_ADDR(ret);
+#endif
 	}
 
 	return ret;
@@ -156,10 +165,24 @@ void mips_dma_free_coherent(struct devic
 	if (dma_release_from_coherent(dev, order, vaddr))
 		return;
 
+#ifndef CONFIG_MAPPED_KERNEL
 	plat_unmap_dma_mem(dev, dma_handle, size, DMA_BIDIRECTIONAL);
 
 	if (!plat_device_is_coherent(dev) && !hw_coherentio)
 		addr = CAC_ADDR(addr);
+#else
+	if (!plat_device_is_coherent(dev)) {
+		pgd_t *pgd = init_mm.pgd + __pgd_offset(addr);
+		pud_t *pud = pud_offset(pgd, addr);
+		pmd_t *pmd = pmd_offset(pud, addr);
+		pte_t *pte = pte_offset(pmd, addr);
+		
+		if (pte_present(*pte)) {
+			addr = (unsigned long) pfn_to_kaddr(pte_pfn(*pte));
+			iounmap(vaddr);
+		}
+	}
+#endif
 
 	page = virt_to_page((void *) addr);
 
Index: linux-3.18.43/arch/mips/mm/fault.c
===================================================================
--- linux-3.18.43.orig/arch/mips/mm/fault.c
+++ linux-3.18.43/arch/mips/mm/fault.c
@@ -85,6 +85,12 @@ static void __kprobes __do_page_fault(st
 		goto VMALLOC_FAULT_TARGET;
 #endif
 
+#ifdef CONFIG_MAPPED_KERNEL
+	/* in case we touched other VM memory */
+	if (KSEGX(address) == KSEG2)
+		goto VMALLOC_FAULT_TARGET;
+#endif
+
 	/*
 	 * If we're in an interrupt or have no user
 	 * context, we must not take the fault..
Index: linux-3.18.43/arch/mips/mm/init.c
===================================================================
--- linux-3.18.43.orig/arch/mips/mm/init.c
+++ linux-3.18.43/arch/mips/mm/init.c
@@ -44,6 +44,10 @@
 #include <asm/tlb.h>
 #include <asm/fixmap.h>
 
+#ifdef CONFIG_MIPS_MIKROTIK
+#include <asm/rb/boards.h>
+#endif
+
 /*
  * We have up to 8 empty zeroed pages so we can map one of the right colour
  * when needed.	 This is necessary only on R4000 / R4400 SC and MC versions
@@ -128,7 +132,7 @@ void *kmap_noncoherent(struct page *page
 	return __kmap_pgprot(page, addr, PAGE_KERNEL_NC);
 }
 
-void kunmap_coherent(void)
+void kunmap_coherent()
 {
 	unsigned int wired;
 	unsigned long flags, old_ctx;
@@ -284,6 +288,10 @@ void __init paging_init(void)
 #endif
 #ifdef CONFIG_ZONE_DMA
 	max_zone_pfns[ZONE_DMA] = MAX_DMA_PFN;
+#if defined(CONFIG_MIPS_MIKROTIK)
+//	if (mips_machgroup != MACH_GROUP_MT_RB100)
+		max_zone_pfns[ZONE_DMA] = max_low_pfn;
+#endif
 #endif
 #ifdef CONFIG_ZONE_DMA32
 	max_zone_pfns[ZONE_DMA32] = MAX_DMA32_PFN;
Index: linux-3.18.43/arch/mips/mm/ioremap.c
===================================================================
--- linux-3.18.43.orig/arch/mips/mm/ioremap.c
+++ linux-3.18.43/arch/mips/mm/ioremap.c
@@ -127,6 +127,7 @@ void __iomem * __ioremap(phys_t phys_add
 	if (!size || last_addr < phys_addr)
 		return NULL;
 
+#ifndef CONFIG_MAPPED_KERNEL
 	/*
 	 * Map uncached objects in the low 512mb of address space using KSEG1,
 	 * otherwise map using page tables.
@@ -149,6 +150,7 @@ void __iomem * __ioremap(phys_t phys_add
 			if(!PageReserved(page))
 				return NULL;
 	}
+#endif
 
 	/*
 	 * Mappings have to be page-aligned
Index: linux-3.18.43/arch/mips/mm/tlb-r4k.c
===================================================================
--- linux-3.18.43.orig/arch/mips/mm/tlb-r4k.c
+++ linux-3.18.43/arch/mips/mm/tlb-r4k.c
@@ -474,7 +474,9 @@ static void r4k_tlb_configure(void)
 	 *     be set to fixed-size pages.
 	 */
 	write_c0_pagemask(PM_DEFAULT_MASK);
+#ifndef CONFIG_MAPPED_KERNEL
 	write_c0_wired(0);
+#endif
 	if (current_cpu_type() == CPU_R10000 ||
 	    current_cpu_type() == CPU_R12000 ||
 	    current_cpu_type() == CPU_R14000)
Index: linux-3.18.43/arch/mips/oprofile/common.c
===================================================================
--- linux-3.18.43.orig/arch/mips/oprofile/common.c
+++ linux-3.18.43/arch/mips/oprofile/common.c
@@ -11,11 +11,15 @@
 #include <linux/init.h>
 #include <linux/oprofile.h>
 #include <linux/smp.h>
+#include <asm/ptrace.h>
 #include <asm/cpu-info.h>
+#include <asm/rb/boards.h>
 #include <asm/cpu-type.h>
 
 #include "op_impl.h"
 
+extern int __init hrtimer_oprofile_init(struct oprofile_operations *);
+
 extern struct op_mips_model op_model_mipsxx_ops __weak;
 extern struct op_mips_model op_model_loongson2_ops __weak;

@@ -70,11 +74,30 @@ static void op_mips_stop(void)
 	on_each_cpu(model->cpu_stop, NULL, 1);
 }
 
+void mt_op_mips_backtrace(struct pt_regs * const regs, unsigned int depth)
+{
+	unsigned long ra = regs->regs[31];
+	unsigned long pc = regs->cp0_epc;
+	unsigned long sp = regs->regs[29];
+	int usermode = user_mode(regs);
+
+	while (depth-- && pc) {
+	    pc = find_prev_frame(pc, ra, &sp, usermode);
+	    if (pc) oprofile_add_trace((unsigned long) pc);
+	    ra = 0;
+	}
+}
+
 int __init oprofile_arch_init(struct oprofile_operations *ops)
 {
 	struct op_mips_model *lmodel = NULL;
 	int res;
 
+	ops->backtrace = mt_op_mips_backtrace;
+
+	if (hrtimer_oprofile_init(ops) == 0)
+		return 0;
+
 	switch (current_cpu_type()) {
 	case CPU_5KC:
 	case CPU_M14KC:
Index: linux-3.18.43/arch/mips/oprofile/Makefile
===================================================================
--- linux-3.18.43.orig/arch/mips/oprofile/Makefile
+++ linux-3.18.43/arch/mips/oprofile/Makefile
@@ -4,6 +4,7 @@ DRIVER_OBJS = $(addprefix ../../../drive
 		oprof.o cpu_buffer.o buffer_sync.o \
 		event_buffer.o oprofile_files.o \
 		oprofilefs.o oprofile_stats.o \
+		hrtimer.o \
 		timer_int.o )
 
 oprofile-y				:= $(DRIVER_OBJS) common.o backtrace.o
Index: linux-3.18.43/arch/mips/rb/irq.c
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/rb/irq.c
@@ -0,0 +1,108 @@
+#include <linux/init.h>
+#include <linux/linkage.h>
+#include <linux/irq.h>
+#include <linux/interrupt.h>
+#include <linux/bitops.h>
+#include <linux/module.h>
+#include <asm/signal.h>
+#include <asm/mipsregs.h>
+#include <asm/irq_cpu.h>
+#include <asm/bootinfo.h>
+#include <asm/vm.h>
+#include <asm/rb/boards.h>
+
+asmlinkage void plat_irq_dispatch(void) {
+	unsigned pending = read_c0_status() & read_c0_cause() & 0xfe00;
+
+	if (pending)
+		do_IRQ(fls(pending) - (9 - MIPS_CPU_IRQ_BASE));
+}
+
+volatile unsigned long virqs;
+EXPORT_SYMBOL(virqs);
+
+static void ack_virq(struct irq_data *d)
+{
+	clear_bit(d->irq - VIRQ_BASE, &virqs);
+}
+
+static inline void unmask_virq(struct irq_data *d)
+{
+}
+
+static inline void mask_virq(struct irq_data *d)
+{
+}
+
+static struct irq_chip virq_controller = {
+	.name	= "virq",
+	.irq_ack	= ack_virq,
+	.irq_unmask     = unmask_virq,
+	.irq_mask	= mask_virq,
+};
+
+static irqreturn_t virq_cascade_irq(int irq, void *dev_id)
+{
+	unsigned i;
+	unsigned irqs = virqs;
+
+	for (i = 0; irqs; ++i) {
+		if (irqs & (1 << i)) {
+			do_IRQ(i + VIRQ_BASE);
+			irqs ^= (1 << i);
+		}
+	}
+	return IRQ_HANDLED;
+}
+
+static struct irqaction virq_cascade  = {
+	.handler = virq_cascade_irq,
+	.name = "virq-cascade",
+};
+
+static void soft_irq_ack(struct irq_data *d)
+{
+	clear_c0_cause(0x100 << (d->irq - MIPS_CPU_IRQ_BASE));
+}
+
+static inline void unmask_soft_irq(struct irq_data *d)
+ {
+	set_c0_status(0x100 << (d->irq - MIPS_CPU_IRQ_BASE));
+	irq_enable_hazard();
+ }
+ 
+static inline void mask_soft_irq(struct irq_data *d)
+{
+	clear_c0_status(0x100 << (d->irq - MIPS_CPU_IRQ_BASE));
+	irq_disable_hazard();
+}
+
+static struct irq_chip soft_irq_controller = {
+	.name	= "MIPS",
+	.irq_ack	= soft_irq_ack,
+	.irq_unmask     = unmask_soft_irq,
+	.irq_mask	= mask_soft_irq,
+};
+
+extern void ont_arch_init_irq(void);
+
+void __init arch_init_irq(void)
+{
+	unsigned i;
+
+	switch (mips_machgroup) {
+	case MACH_GROUP_MT_VM:
+		mips_cpu_irq_init();
+		break;
+	}
+
+	if (mips_machgroup != MACH_GROUP_MT_RB500 &&
+	    mips_machgroup != MACH_GROUP_MT_RB100) {
+		irq_set_chip_and_handler(1, &soft_irq_controller, handle_percpu_irq);
+		setup_irq(1, &virq_cascade);
+		
+		for (i = VIRQ_BASE;  i < VIRQ_BASE + 32; ++i)
+			irq_set_chip_and_handler(i, &virq_controller,
+						 handle_edge_irq);
+	}
+}
Index: linux-3.18.43/arch/mips/rb/Makefile
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/rb/Makefile
@@ -0,0 +1 @@
+obj-y += prom.o platform.o irq.o
Index: linux-3.18.43/arch/mips/rb/Platform
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/rb/Platform
@@ -0,0 +1,13 @@
+#
+# Mikrotik RB100/RB500 boards
+#
+platform-$(CONFIG_MIPS_MIKROTIK) += rb/
+platform-$(CONFIG_MIPS_MIKROTIK) += rb/vm/
+cflags-$(CONFIG_MIPS_MIKROTIK) += -I$(srctree)/arch/mips/include/asm/mach-rb
+ifdef CONFIG_MAPPED_KERNEL
+load-$(CONFIG_MIPS_MIKROTIK) += 0xffffffffc0101000
+OBJCOPYFLAGS += --change-addresses=0xc0000000
+else
+load-$(CONFIG_MIPS_MIKROTIK) += 0xffffffff80101000
+endif
+
Index: linux-3.18.43/arch/mips/rb/platform.c
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/rb/platform.c
@@ -0,0 +1,18 @@
+#include <linux/platform_device.h>
+#include <linux/serial.h>
+#include <linux/serial_8250.h>
+#include <linux/spi/spi.h>
+#include <linux/mtd/partitions.h>
+#include <linux/spi/flash.h>
+#include <linux/i2c-gpio.h>
+#include <asm/bootinfo.h>
+#include <asm/rb/boards.h>
+#include <asm/rb/booter.h>
+#include <asm/serial.h>
+
+int rb_platform_init(void)
+{
+	return 0;
+}
+
+arch_initcall(rb_platform_init);
Index: linux-3.18.43/arch/mips/rb/prom.c
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/rb/prom.c
@@ -0,0 +1,152 @@
+#include <linux/init.h>
+#include <linux/mm.h>
+#include <linux/module.h>
+#include <linux/string.h>
+#include <linux/console.h>
+#include <asm/bootinfo.h>
+#include <asm/rb/boards.h>
+#include <linux/bootmem.h>
+#include <linux/ioport.h>
+#include <linux/ctype.h>
+#include <linux/irq.h>
+#include <linux/initrd.h>
+
+#define FREQ_TAG   "HZ="
+#define BOARD_TAG  "board="
+
+#define SR_NMI	0x00180000
+
+extern void rbvm_setup(void);
+
+extern char arcs_cmdline[COMMAND_LINE_SIZE];
+
+extern unsigned long totalram_pages;
+extern unsigned long mips_hpt_frequency;
+
+unsigned char mips_mac_address[6];
+
+unsigned long mips_machgroup __read_mostly = 0;
+EXPORT_SYMBOL(mips_machgroup);
+
+const char *get_system_type(void)
+{
+	switch (mips_machgroup) {
+	case MACH_GROUP_MT_VM:
+		return "Mikrotik VM";
+	}
+	return "unknown routerboard";
+}
+
+void __init prom_init(void)
+{
+	int argc = fw_arg0;
+	char **argv = (char **) fw_arg1;
+	unsigned char board_type[16];
+
+	unsigned i, offset = 0;
+
+	set_io_port_base(KSEG1);
+
+	memset(board_type, 0, sizeof(board_type));
+
+	/* HZ must be parsed here because otherwise is too late */
+	for (i = 0; (i < argc && argv[i] != NULL); i++) {
+		if (strncmp(argv[i], FREQ_TAG, sizeof(FREQ_TAG) - 1) == 0) {
+			mips_hpt_frequency = 
+			    simple_strtoul(argv[i] + sizeof(FREQ_TAG) - 1, 0, 10);
+			continue;
+		}
+		if (strncmp(argv[i], BOARD_TAG, sizeof(BOARD_TAG) - 1) == 0) {
+			strncpy(board_type, argv[i] + sizeof(BOARD_TAG) - 1,
+				sizeof(board_type));
+		}
+		offset += snprintf(arcs_cmdline + offset, sizeof(arcs_cmdline) - offset,
+				   "%s ", argv[i]);
+	}
+
+	mips_machgroup = MACH_GROUP_MT_VM;
+	mips_machtype = 0;
+}
+
+void __init prom_free_prom_memory(void)
+{
+	unsigned long addr, end;
+	extern char _text;
+
+	/*
+	 * Free everything below the kernel itself but leave
+	 * the first page reserved for the exception handlers.
+	 */
+
+	end = __pa(&_text);
+	addr = PAGE_SIZE;
+
+	while (addr < end) {
+		ClearPageReserved(virt_to_page(__va(addr)));
+		init_page_count(virt_to_page(__va(addr)));
+		free_page((unsigned long)__va(addr));
+		addr += PAGE_SIZE;
+		++totalram_pages;
+	}
+}
+
+void __init plat_mem_setup(void)
+{
+#ifdef CONFIG_BLK_DEV_INITRD
+	extern int _end;
+	u32 *initrd_header;
+
+	initrd_header = __va(PAGE_ALIGN(__pa_symbol(&_end) + 8)) - 8;
+	if (initrd_header[0] == 0x494E5244) {
+		initrd_start = (unsigned long) (initrd_header + 2);
+                initrd_end = initrd_start + initrd_header[1];
+	}
+#endif    
+
+	switch (mips_machgroup) {
+	case MACH_GROUP_MT_VM:
+		rbvm_setup();
+		break;
+	}
+}
+
+void __init plat_time_init(void)
+{
+}
+
+static int __init setup_kmac(char *s)
+{
+	int i, j;
+	unsigned char result, value;
+
+	for (i = 0; i < 6; i++) {
+		if (s[0] == '\0' || s[1] == '\0') return 0;
+		if (i != 5 && s[2] != ':') return 0;
+
+		result = 0;
+		for (j = 0; j < 2; j++) {
+			if (!isxdigit(*s)) return 0;
+
+			value = isdigit(*s) ? *s - '0' :
+				toupper(*s) - 'A' + 10;
+			if (value >= 16) return 0;
+
+			result = result * 16 + value;
+                        s++;
+                }
+
+                s++;
+                mips_mac_address[i] = result;
+        }
+
+        return *s == '\0';
+}
+
+__setup("kmac=", setup_kmac);
+
+EXPORT_SYMBOL(mips_mac_address);
+
+unsigned long long sched_clock(void)
+{
+	return read_c0_count() * 1000000000 / mips_hpt_frequency;
+}
Index: linux-3.18.43/arch/mips/rb/vm/Makefile
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/rb/vm/Makefile
@@ -0,0 +1 @@
+obj-y	 := setup.o
Index: linux-3.18.43/arch/mips/rb/vm/setup.c
===================================================================
--- /dev/null
+++ linux-3.18.43/arch/mips/rb/vm/setup.c
@@ -0,0 +1,142 @@
+#include <linux/interrupt.h>
+#include <linux/sched.h>
+#include <asm/reboot.h>
+#include <asm/vm.h>
+#include <asm/rb/boards.h>
+
+#define BUF_SIZE	256
+#define BUF_COUNT	4
+
+hypercall(vm_create_queue, 4, unsigned id, unsigned irq,
+		 unsigned tx, unsigned rx);
+hypercall(vm_release_queue, 5, unsigned id);
+hypercall(vm_running, 6, void);
+hypercall(vm_setup_irqs, 14, unsigned *irqs, unsigned count);
+
+static volatile struct vdma_descr tx_chain[BUF_COUNT];
+static volatile struct vdma_descr rx_chain[BUF_COUNT];
+static unsigned char tx_buffers[BUF_COUNT][BUF_SIZE];
+static unsigned char rx_buffers[BUF_COUNT][BUF_SIZE];
+
+static unsigned cur_tx;
+static unsigned cur_rx;
+
+static int send_message(const unsigned char *buf, int len)
+{
+	unsigned long flags;
+
+	local_irq_save(flags);
+
+	/* drop some data if full buffer */
+	while (tx_chain[cur_tx].size & DONE)
+		asm volatile ("wait");
+
+	len = min_t(int, len, BUF_SIZE);
+	memcpy(tx_buffers[cur_tx], buf, len);
+	tx_chain[cur_tx].size = len | DONE;
+
+	cur_tx = (cur_tx + 1) % BUF_COUNT;
+
+	local_irq_restore(flags);
+
+	return len;
+}
+
+static int recv_message(char *buf, int len)
+{
+	unsigned long flags;
+
+	local_irq_save(flags);
+
+	if (!(rx_chain[cur_rx].size & DONE)) {
+		local_irq_restore(flags);
+		return 0;
+	}
+	
+	len = min_t(int, len, rx_chain[cur_rx].size & ~DONE);
+	memcpy(buf, rx_buffers[cur_rx], len);
+
+	rx_chain[cur_rx].size = BUF_SIZE;
+	cur_rx = (cur_rx + 1) % BUF_COUNT;
+
+	local_irq_restore(flags);
+
+	return len;
+}
+
+static irqreturn_t ctrl_interrupt(int irq, void *dev_id)
+{
+	struct task_struct *init;
+	char buf[256];
+	int len;
+
+	len = recv_message(buf, sizeof(buf));
+	if (len <= 0)
+		return IRQ_HANDLED;
+
+	if (strncmp(buf, "restart", len) == 0) {
+		printk("RESTART\n");
+		init = find_task_by_pid_ns(1, &init_pid_ns);
+		if (init)
+			send_sig(SIGINT, init, 1);
+	} else if (strncmp(buf, "halt", len) == 0) {
+	    printk("HALT\n");
+		init = find_task_by_pid_ns(1, &init_pid_ns);
+		if (init)
+			send_sig(SIGWINCH, init, 1);
+	}
+
+	return IRQ_HANDLED;
+}
+
+static void rbvm_machine_restart(char *command)
+{
+	char msg[] = "restart";
+
+	send_message(msg, sizeof(msg));
+}
+
+static void rbvm_machine_halt(void)
+{
+	char msg[] = "halt";
+
+	send_message(msg, sizeof(msg));
+}
+
+void __init rbvm_setup(void)
+{
+	extern unsigned long virqs;
+	int i;
+
+	vm_setup_irqs((unsigned *) &virqs, 32);
+
+	for (i = 0; i < BUF_COUNT; ++i) {
+		rx_chain[i].addr = (unsigned) rx_buffers[i];
+		rx_chain[i].size = BUF_SIZE;
+		rx_chain[i].next = (unsigned) &rx_chain[i + 1];
+		
+		tx_chain[i].addr = (unsigned) tx_buffers[i];
+		tx_chain[i].size = 0;
+		tx_chain[i].next = (unsigned) &tx_chain[i + 1];
+	}
+	rx_chain[BUF_COUNT - 1].next = (unsigned) &rx_chain[0];
+	tx_chain[BUF_COUNT - 1].next = (unsigned) &tx_chain[0];
+
+	vm_create_queue(0, 0, (unsigned) &tx_chain[0],
+			(unsigned) &rx_chain[0]);
+
+	_machine_restart = rbvm_machine_restart;
+	_machine_halt = rbvm_machine_halt;
+}
+
+int __init init_ctrl_interrupt(void)
+{
+	if (mips_machgroup != MACH_GROUP_MT_VM)
+		return 0;
+
+	if (request_irq(VIRQ_BASE + 0, ctrl_interrupt, 0, "ctrl", (void *) 1))
+		return -EBUSY;
+	return 0;
+
+}
+arch_initcall(init_ctrl_interrupt);
Index: linux-3.18.43/drivers/block/loop.c
===================================================================
--- linux-3.18.43.orig/drivers/block/loop.c
+++ linux-3.18.43/drivers/block/loop.c
@@ -373,6 +373,9 @@ do_lo_receive(struct loop_device *lo,
 	struct file *file;
 	ssize_t retval;
 
+	pgoff_t index;
+	pgoff_t last_index;
+
 	cookie.lo = lo;
 	cookie.page = bvec->bv_page;
 	cookie.offset = bvec->bv_offset;
@@ -387,6 +390,11 @@ do_lo_receive(struct loop_device *lo,
 	file = lo->lo_backing_file;
 	retval = splice_direct_to_actor(file, &sd, lo_direct_splice_actor);
 
+	/* HACK: try to free up page cache from tripple buffers */
+	index = pos >> PAGE_CACHE_SHIFT;
+	last_index = (pos + bsize + PAGE_CACHE_SIZE - 1) >> PAGE_CACHE_SHIFT;
+	invalidate_mapping_pages(file->f_mapping, index, last_index);
+
 	return retval;
 }
 
Index: linux-3.18.43/drivers/char/Kconfig
===================================================================
--- linux-3.18.43.orig/drivers/char/Kconfig
+++ linux-3.18.43/drivers/char/Kconfig
@@ -144,6 +144,13 @@ config PPDEV
 	  If unsure, say N.
 
 source "drivers/tty/hvc/Kconfig"
+config HVC_META
+	bool "MetaROUTER Hypervisor Console support"
+	depends on METAROUTER || MIPS_MIKROTIK
+	select HVC_DRIVER
+	select HVC_IRQ
+	default y
+
 
 config VIRTIO_CONSOLE
 	tristate "Virtio console"
@@ -603,4 +610,3 @@ config TILE_SROM
 source "drivers/char/xillybus/Kconfig"
 
 endmenu
-
Index: linux-3.18.43/drivers/net/ethernet/Kconfig
===================================================================
--- linux-3.18.43.orig/drivers/net/ethernet/Kconfig
+++ linux-3.18.43/drivers/net/ethernet/Kconfig
@@ -103,6 +103,11 @@ config LANTIQ_ETOP
 	---help---
 	  Support for the MII0 inside the Lantiq SoC
 
+config MT_VETH
+	bool "MetaROUTER Virtual Ethernet support"
+	depends on METAROUTER || MIPS_MIKROTIK
+	default y
+
 source "drivers/net/ethernet/marvell/Kconfig"
 source "drivers/net/ethernet/mellanox/Kconfig"
 source "drivers/net/ethernet/micrel/Kconfig"
Index: linux-3.18.43/drivers/net/ethernet/Makefile
===================================================================
--- linux-3.18.43.orig/drivers/net/ethernet/Makefile
+++ linux-3.18.43/drivers/net/ethernet/Makefile
@@ -42,6 +42,7 @@ obj-$(CONFIG_NET_VENDOR_XSCALE) += xscal
 obj-$(CONFIG_IP1000) += icplus/
 obj-$(CONFIG_JME) += jme.o
 obj-$(CONFIG_KORINA) += korina.o
+obj-$(CONFIG_MT_VETH) += mtveth.o
 obj-$(CONFIG_LANTIQ_ETOP) += lantiq_etop.o
 obj-$(CONFIG_NET_VENDOR_MARVELL) += marvell/
 obj-$(CONFIG_NET_VENDOR_MELLANOX) += mellanox/
Index: linux-3.18.43/drivers/net/ethernet/mtveth.c
===================================================================
--- /dev/null
+++ linux-3.18.43/drivers/net/ethernet/mtveth.c
@@ -0,0 +1,284 @@
+#include <linux/skbuff.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/interrupt.h>
+#include <asm/vm.h>
+
+#define MAX_IFACES	8
+
+#define TXBUF_COUNT	1024
+#define RXBUF_COUNT	128
+
+#define RXBUF_SIZE	10300
+
+extern int vm_create_queue(unsigned id, unsigned irq,
+			   unsigned tx, unsigned rx);
+extern int vm_release_queue(unsigned id);
+
+#define CMD_NEWIFACE	0
+#define CMD_DELIFACE	1
+
+struct ctrl_msg {
+	unsigned cmd;
+	unsigned short id;
+	unsigned char hwaddr[6];
+} __attribute__((packed));
+
+static volatile struct vdma_descr rx_descr[RXBUF_COUNT];
+static volatile struct vdma_descr tx_descr[TXBUF_COUNT];
+static struct sk_buff *rx_skbs[RXBUF_COUNT];
+static struct sk_buff *tx_skbs[TXBUF_COUNT];
+
+static unsigned last_tx;
+static atomic_t cur_tx;
+static unsigned cur_rx;
+static unsigned max_tx;
+
+static struct net_device *devs[MAX_IFACES];
+
+struct veth_private {
+	unsigned id;
+	atomic_t pending_tx;
+};
+
+static void ctrl_receiver(struct work_struct *work);
+
+static struct sk_buff_head ctrl_queue;
+static DECLARE_WORK(ctrl_work, ctrl_receiver);
+
+static int veth_xmit(struct sk_buff *skb, struct net_device *dev)
+{
+	struct veth_private *veth = netdev_priv(dev);
+	unsigned cur = atomic_read(&cur_tx) % TXBUF_COUNT;
+    
+	if (skb_padto(skb, ETH_ZLEN))
+		return NETDEV_TX_OK;
+
+	if (tx_descr[cur].size & DONE) {
+		dev->stats.tx_dropped++;
+		dev_kfree_skb_any(skb);
+		return NETDEV_TX_OK;
+	}
+
+	if (skb_headroom(skb) < 2) {
+		struct sk_buff *s = skb;
+		skb = skb_realloc_headroom(s, 2);
+		dev_kfree_skb_any(s);
+	} else {
+		skb = skb_unshare(skb, GFP_ATOMIC);
+	}
+	if (!skb) {
+		dev->stats.tx_dropped++;
+		return NETDEV_TX_OK;
+	}
+	*(u16 *) skb_push(skb, 2) = veth->id;
+
+	dev->stats.tx_packets++;
+	dev->stats.tx_bytes += skb->len;
+
+	tx_descr[cur].addr = (unsigned) skb->data;
+	tx_descr[cur].size = skb->len | DONE;
+
+	if (tx_skbs[cur]) {
+		/* should not happen */
+		dev->stats.tx_dropped++;
+		dev_kfree_skb_any(skb);
+		return NETDEV_TX_BUSY;
+	}
+
+	tx_skbs[cur] = skb;
+	atomic_add(1, &cur_tx);
+
+	if (atomic_add_return(1, &veth->pending_tx) >= max_tx) {
+		netif_stop_queue(dev);
+
+		/* in case we got rewaken right before stop */
+		if (atomic_read(&veth->pending_tx) < max_tx)
+			netif_wake_queue(dev);
+	}
+
+	return 0;
+}
+
+static irqreturn_t veth_interrupt(int irq, void *dev_id)
+{
+	unsigned cur;
+
+	while (last_tx != atomic_read(&cur_tx)) {
+		unsigned last = last_tx % TXBUF_COUNT;
+		struct net_device *dev;
+		struct veth_private *veth;
+
+		if (tx_descr[last].size & DONE)
+			break;
+
+		dev = tx_skbs[last]->dev;
+		veth = netdev_priv(dev);
+		dev_kfree_skb_irq(tx_skbs[last]);
+		tx_skbs[last] = NULL;
+
+		++last_tx;
+
+		if (atomic_sub_return(1, &veth->pending_tx) < max_tx)
+			netif_wake_queue(dev);
+	}
+
+	cur = cur_rx % RXBUF_COUNT;
+	while ((rx_descr[cur].size & DONE)) {
+		struct sk_buff *skb = rx_skbs[cur];
+		struct net_device *dev;
+		unsigned id;
+
+		skb_put(skb, rx_descr[cur].size & ~DONE);
+		if (skb->len < 2) {
+			dev_kfree_skb_irq(skb);
+			goto next;
+		}
+
+		id = *(u16 *) skb->data;
+		skb_pull(skb, 2);
+
+		if (id == 0) {
+			__skb_queue_tail(&ctrl_queue, skb);
+			schedule_work(&ctrl_work);
+			goto next;
+		}
+		if (id >= MAX_IFACES || !devs[id]) {
+			dev_kfree_skb_irq(skb);
+			goto next;
+		}
+		dev = devs[id];
+
+		skb->dev = dev;
+		skb->protocol = eth_type_trans(skb, dev);
+
+		dev->last_rx = jiffies;
+		++dev->stats.rx_packets;
+		dev->stats.rx_bytes += skb->len;
+
+		netif_rx(skb);
+
+	  next:
+		skb = dev_alloc_skb(RXBUF_SIZE);
+		rx_skbs[cur] = skb;
+		if (skb) {
+			rx_descr[cur].addr = (unsigned) skb->data;
+			rx_descr[cur].size = RXBUF_SIZE;
+		} else {
+			rx_descr[cur].size = 0;
+		}
+
+		++cur_rx;
+		cur = cur_rx % RXBUF_COUNT;
+	}
+
+	return IRQ_HANDLED;
+}
+
+static const struct net_device_ops veth_netdev_ops = {
+	.ndo_start_xmit		= veth_xmit,
+};
+
+static int veth_alloc_dev(unsigned id, const unsigned char *hwaddr)
+{
+	struct veth_private *veth;
+	struct net_device *dev;
+	int err;
+
+	//SET_NETDEV_DEV(dev, &pdev->dev);
+	//platform_set_drvdata(pdev, dev);
+
+	dev = alloc_etherdev(sizeof(struct veth_private));
+	if (!dev)
+		return -ENOMEM;
+
+	veth = netdev_priv(dev);
+	veth->id = id;
+	atomic_set(&veth->pending_tx, 1);
+	memcpy(dev->dev_addr, hwaddr, 6);
+	dev->netdev_ops = &veth_netdev_ops;
+
+	err = register_netdev(dev);
+	if (err < 0) {
+		printk("cannot register net device %u\n", err);
+		goto netdev_err;
+	}
+
+	devs[id] = dev;
+	return 0;
+
+  netdev_err:
+	free_netdev(dev);
+	return err;
+}
+
+static int recv_ctrl_msg(struct sk_buff *skb)
+{
+	struct ctrl_msg *msg = (struct ctrl_msg *) skb->data;
+
+	if (skb->len < sizeof(struct ctrl_msg))
+		return -EINVAL;
+
+	if (msg->cmd == CMD_NEWIFACE) {
+		if (msg->id >= MAX_IFACES || devs[msg->id])
+			return -EBUSY;
+
+		veth_alloc_dev(msg->id, msg->hwaddr);
+		return 0;
+	} else if (msg->cmd == CMD_DELIFACE) {
+		struct net_device *dev;
+
+		if (msg->id >= MAX_IFACES || !devs[msg->id])
+			return -EINVAL;
+		
+		dev = devs[msg->id];
+		devs[msg->id] = NULL;
+
+		unregister_netdev(dev);
+	}
+	return -EINVAL;
+}
+
+static void ctrl_receiver(struct work_struct *work)
+{
+	struct sk_buff *skb;
+
+	while ((skb = skb_dequeue(&ctrl_queue)))
+		recv_ctrl_msg(skb);
+}
+
+int veth_init(void)
+{
+	unsigned i;
+
+	if (vm_running() != 0)
+		return 0;
+
+	skb_queue_head_init(&ctrl_queue);
+
+	if (request_irq(get_virq_nr(3), veth_interrupt, IRQF_SHARED,
+			"veth", (void *) 1))
+		return -EBUSY;
+
+	for (i = 0; i < TXBUF_COUNT; ++i) {
+		tx_descr[i].addr = 0;
+		tx_descr[i].size = 0;
+		tx_descr[i].next = (unsigned) &tx_descr[i + 1];
+	}
+	for (i = 0; i < RXBUF_COUNT; ++i) {
+		rx_skbs[i] = dev_alloc_skb(RXBUF_SIZE);
+		rx_descr[i].addr = (unsigned) rx_skbs[i]->data;
+		rx_descr[i].size = RXBUF_SIZE;
+		rx_descr[i].next = (unsigned) &rx_descr[i + 1];
+	}
+	tx_descr[TXBUF_COUNT - 1].next = (unsigned) &tx_descr[0];
+	rx_descr[RXBUF_COUNT - 1].next = (unsigned) &rx_descr[0];
+	
+	vm_create_queue(3, 3,
+			(unsigned) &tx_descr[0], (unsigned) &rx_descr[0]);
+
+	max_tx = TXBUF_COUNT / MAX_IFACES;
+
+	return 0;
+}
+module_init(veth_init);
Index: linux-3.18.43/drivers/tty/hvc/hvc_console.c
===================================================================
--- linux-3.18.43.orig/drivers/tty/hvc/hvc_console.c
+++ linux-3.18.43/drivers/tty/hvc/hvc_console.c
@@ -597,7 +597,7 @@ static int hvc_chars_in_buffer(struct tt
  * there has been no input for some time.
  */
 #define MIN_TIMEOUT		(10)
-#define MAX_TIMEOUT		(2000)
+#define MAX_TIMEOUT		(200)
 static u32 timeout = MIN_TIMEOUT;
 
 #define HVC_POLL_READ	0x00000001
Index: linux-3.18.43/drivers/tty/hvc/hvc_meta.c
===================================================================
--- /dev/null
+++ linux-3.18.43/drivers/tty/hvc/hvc_meta.c
@@ -0,0 +1,135 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/string.h>
+#include <linux/errno.h>
+#include <linux/mm.h>
+#include <linux/bootmem.h>
+#include <linux/slab.h>
+#include <asm/vm.h>
+#include <asm/irq.h>
+#include "hvc_console.h"
+
+extern int vm_create_queue(unsigned id, unsigned irq,
+			   unsigned tx, unsigned rx);
+extern int vm_release_queue(unsigned id);
+
+#define BUF_SIZE	4096
+
+static volatile struct vdma_descr tx_descr;
+static volatile struct vdma_descr rx_descr;
+
+static unsigned rx_offset;
+static DEFINE_SPINLOCK(lock);
+
+static int put_chars(u32 vtermno, const char *buf, int count)
+{
+	unsigned long flags;
+	int i;
+
+	spin_lock_irqsave(&lock, flags);
+
+#ifdef __powerpc__
+	for (i = 0; i < 2000000; ++i) {
+#else
+	for (i = 0; i < 2; ++i) {
+#endif
+		unsigned size = xchg(&tx_descr.size, 0);
+
+		if (!(size & DONE)) {
+			count = min(count, BUF_SIZE);
+			memcpy((char *) tx_descr.addr, buf, count);
+			tx_descr.size = count | DONE;
+
+			spin_unlock_irqrestore(&lock, flags);
+			return count;
+		}
+
+		if (size == (BUF_SIZE | DONE)) {
+			if (i == 0) {
+				tx_descr.size = size;
+				hc_yield();
+				continue;
+			} else {
+				unsigned drop = BUF_SIZE / 4;
+				size = BUF_SIZE - drop;
+				memcpy((char *) tx_descr.addr,
+				       (char *) tx_descr.addr + drop,
+				       size);
+			}
+		}
+
+		size &= ~DONE;
+		count = min(BUF_SIZE - (int) size, count);
+		memcpy((char *) tx_descr.addr + size, buf, count);
+		tx_descr.size = (size + count) | DONE;
+
+		spin_unlock_irqrestore(&lock, flags);
+		return count;
+	}
+
+	spin_unlock_irqrestore(&lock, flags);
+	return 0;
+}
+
+static int get_chars(u32 vtermno, char *buf, int count)
+{
+	unsigned long flags;
+	unsigned size;
+
+	spin_lock_irqsave(&lock, flags);
+
+	if (!(rx_descr.size & DONE)) {
+		spin_unlock_irqrestore(&lock, flags);
+		return -EAGAIN;
+	}
+	
+	size = (rx_descr.size & ~DONE) - rx_offset;
+	count = min(count, (int) size);
+
+	memcpy(buf, (char *) rx_descr.addr + rx_offset, count);
+
+	if (count == size) {
+		rx_descr.size = BUF_SIZE;
+		rx_offset = 0;
+	} else {
+		rx_offset += count;
+	}
+
+	spin_unlock_irqrestore(&lock, flags);
+	return count;
+}
+
+static struct hv_ops cons = {
+	.put_chars = put_chars,
+	.get_chars = get_chars,
+	.notifier_add = notifier_add_irq,
+	.notifier_del = notifier_del_irq,
+};
+
+static int __init cons_init(void)
+{
+	if (vm_running() != 0)
+		return 0;
+
+	rx_descr.addr = (unsigned) kmalloc(BUF_SIZE, GFP_KERNEL);
+	rx_descr.size = BUF_SIZE;
+	rx_descr.next = (unsigned) &rx_descr;
+	
+	tx_descr.addr = (unsigned) kmalloc(BUF_SIZE, GFP_KERNEL);
+	tx_descr.size = 0;
+	tx_descr.next = (unsigned) &tx_descr;
+
+	vm_create_queue(1, 1,
+			(unsigned) &tx_descr, (unsigned) &rx_descr);
+
+	return hvc_instantiate(0, 0, &cons);
+}
+console_initcall(cons_init);
+
+int vm_init(void)
+{
+	if (vm_running() == 0) 
+		hvc_alloc(0, get_virq_nr(1), &cons, 256);
+	return 0;
+}
+module_init(vm_init);
Index: linux-3.18.43/drivers/tty/hvc/Makefile
===================================================================
--- linux-3.18.43.orig/drivers/tty/hvc/Makefile
+++ linux-3.18.43/drivers/tty/hvc/Makefile
@@ -8,6 +8,7 @@ obj-$(CONFIG_HVC_BEAT)		+= hvc_beat.o
 obj-$(CONFIG_HVC_DRIVER)	+= hvc_console.o
 obj-$(CONFIG_HVC_IRQ)		+= hvc_irq.o
 obj-$(CONFIG_HVC_XEN)		+= hvc_xen.o
+obj-$(CONFIG_HVC_META)		+= hvc_meta.o
 obj-$(CONFIG_HVC_IUCV)		+= hvc_iucv.o
 obj-$(CONFIG_HVC_UDBG)		+= hvc_udbg.o
 obj-$(CONFIG_HVC_BFIN_JTAG)	+= hvc_bfin_jtag.o
Index: linux-3.18.43/fs/Kconfig
===================================================================
--- linux-3.18.43.orig/fs/Kconfig
+++ linux-3.18.43/fs/Kconfig
@@ -216,6 +216,7 @@ source "fs/ufs/Kconfig"
 source "fs/exofs/Kconfig"
 source "fs/f2fs/Kconfig"
 source "fs/efivarfs/Kconfig"
+source "fs/metafs/Kconfig"
 
 endif # MISC_FILESYSTEMS
 
Index: linux-3.18.43/fs/Makefile
===================================================================
--- linux-3.18.43.orig/fs/Makefile
+++ linux-3.18.43/fs/Makefile
@@ -61,6 +61,7 @@ obj-$(CONFIG_PROFILING)		+= dcookies.o
 obj-$(CONFIG_DLM)		+= dlm/
  
 # Do not add any filesystems before this line
+obj-$(CONFIG_META_FS)		+= metafs/
 obj-$(CONFIG_FSCACHE)		+= fscache/
 obj-$(CONFIG_REISERFS_FS)	+= reiserfs/
 obj-$(CONFIG_EXT3_FS)		+= ext3/ # Before ext2 so root fs can be ext3
Index: linux-3.18.43/fs/metafs/inode.c
===================================================================
--- /dev/null
+++ linux-3.18.43/fs/metafs/inode.c
@@ -0,0 +1,909 @@
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/statfs.h>
+#include <linux/pagemap.h>
+#include <linux/namei.h>
+#include <linux/slab.h>
+#include <linux/mount.h>
+#include <asm/vm.h>
+
+#define CMD_GETINODE		0
+#define CMD_RELEASE_INODE	1
+#define CMD_LOOKUP		2
+#define CMD_READPAGE		3
+#define CMD_READLINK		4
+#define CMD_READDIR		5
+#define CMD_WRITEPAGE		6
+#define CMD_CREATE		7
+#define CMD_UNLINK		8
+#define CMD_SYMLINK		9
+#define CMD_RENAME		10
+#define CMD_SETINODE		11
+#define CMD_STATFS		12
+#define CMD_HLINK		13
+#define CMD_FSYNC		14
+
+struct hptime {
+	unsigned sec;
+	unsigned nsec;
+};
+
+struct getinode_req {
+	unsigned short id;
+	unsigned short cmd;
+	unsigned long long ino;
+} __attribute__((packed));
+
+struct inode_rep {
+	int status;
+	unsigned long long ino;
+	unsigned long long size;
+	unsigned mode;
+	unsigned nlink;
+	unsigned uid;
+	unsigned gid;
+	unsigned rdev;
+	struct hptime atime;
+	struct hptime mtime;
+	struct hptime ctime;
+	unsigned long blksize;
+	unsigned long long blocks;
+} __attribute__((packed));
+
+struct setinode_req {
+	unsigned short id;
+	unsigned short cmd;
+	unsigned long long ino;
+	unsigned long long size;
+	unsigned mode;
+	unsigned uid;
+	unsigned gid;
+	unsigned rdev;
+} __attribute__((packed));
+
+struct lookup_req {
+	unsigned short id;
+	unsigned short cmd;
+	unsigned long long parent_ino;
+	char name[0];
+} __attribute__((packed));
+
+struct create_req {
+	unsigned short id;
+	unsigned short cmd;
+	unsigned long long parent_ino;
+	unsigned mode;
+	unsigned dev;
+	char name[0];
+} __attribute__((packed));
+
+struct unlink_req {
+	unsigned short id;
+	unsigned short cmd;
+	unsigned long long parent_ino;
+	char name[0];
+} __attribute__((packed));
+
+struct symlink_req {
+	unsigned short id;
+	unsigned short cmd;
+	unsigned long long parent_ino;
+	unsigned namelen;
+	char names[0];
+} __attribute__((packed));
+
+struct hlink_req {
+	unsigned short id;
+	unsigned short cmd;
+	unsigned long long parent_ino;
+	unsigned long long ino;
+	char name[0];
+} __attribute__((packed));
+
+struct rename_req {
+	unsigned short id;
+	unsigned short cmd;
+	unsigned long long old_parent_ino;
+	unsigned long long new_parent_ino;
+	unsigned old_namelen;
+	char names[0];
+} __attribute__((packed));
+
+struct readpage_req {
+	unsigned short id;
+	unsigned short cmd;
+	unsigned long long ino;
+	unsigned long long offset;
+	unsigned size;
+} __attribute__((packed));
+
+struct writepage_req {
+	unsigned short id;
+	unsigned short cmd;
+	unsigned long long ino;
+	unsigned long long offset;
+	unsigned size;
+} __attribute__((packed));
+
+struct fsync_req {
+	unsigned short id;
+	unsigned short cmd;
+	unsigned long long ino;
+} __attribute__((packed));
+
+struct readlink_req {
+	unsigned short id;
+	unsigned short cmd;
+	unsigned long long ino;
+} __attribute__((packed));
+
+struct readlink_rep {
+	int status;
+	char target[0];
+} __attribute__((packed));
+
+struct readdir_req {
+	unsigned short id;
+	unsigned short cmd;
+	unsigned long long ino;
+	unsigned long long offset;
+	unsigned size;
+} __attribute__((packed));
+
+struct dirnode {
+	unsigned long long ino;
+	unsigned long long offset;
+	unsigned char type;
+	unsigned short len;
+	char name[0];
+} __attribute__((packed));
+
+struct readdir_rep {
+	int status;
+	unsigned long long offset;
+	struct dirnode entries[0];
+} __attribute__((packed));
+
+struct statfs_req {
+	unsigned short id;
+	unsigned short cmd;
+} __attribute__((packed));
+
+struct statfs_rep {
+	int status;
+	unsigned blocks;
+	unsigned bfree;
+} __attribute__((packed));
+
+#define BUF_COUNT	16
+
+extern int vm_create_queue(unsigned id, unsigned irq,
+			   unsigned tx, unsigned rx);
+extern int vm_release_queue(unsigned id);
+
+static volatile struct vdma_descr rx_descr[BUF_COUNT];
+static volatile struct vdma_descr tx_descr[BUF_COUNT];
+
+#define MFS_ID(sb) ((unsigned) sb->s_fs_info)
+
+
+static void mfs_update_inode(struct inode *i, struct inode_rep *rep);
+static struct inode *mfs_new_inode(struct super_block *sb,
+				   struct inode_rep *rep);
+
+static void start_new_request(unsigned *tx_idx, unsigned tx_slots,
+			      unsigned *rx_idx, unsigned rx_slots)
+{
+	static DEFINE_MUTEX(mfs_lock);
+	static unsigned cur_tx;
+	static unsigned cur_rx;
+
+	mutex_lock(&mfs_lock);
+
+	*tx_idx = cur_tx;
+	cur_tx += tx_slots;
+
+	*rx_idx = cur_rx;
+	cur_rx += rx_slots;
+
+	mutex_unlock(&mfs_lock);
+}
+
+static void prepare_receive(unsigned idx, void *resp, unsigned rp_size)
+{
+	idx = idx & (BUF_COUNT - 1);
+
+	rx_descr[idx].addr = (unsigned) resp;
+	rx_descr[idx].size = rp_size;
+}
+
+static void post_request(unsigned idx, const void *req, unsigned rq_size)
+{
+	idx = idx & (BUF_COUNT - 1);
+
+	while (tx_descr[idx].size & DONE) {
+		hc_yield();
+	}
+
+	tx_descr[idx].addr = (unsigned) req;
+	tx_descr[idx].size = rq_size | DONE;
+}
+
+static unsigned wait_for_reply(unsigned idx)
+{
+	idx = idx & (BUF_COUNT - 1);
+
+	while (!(rx_descr[idx].size & DONE)) {
+		hc_yield();
+	}
+	return rx_descr[idx].size & ~(PAGE_MASK<<1);
+}
+
+static unsigned send_request(const void *req, unsigned rq_size,
+			     void *resp, unsigned rp_size)
+{
+	unsigned tx;
+	unsigned rx;
+
+	start_new_request(&tx, 1, &rx, 1);
+	prepare_receive(rx, resp, rp_size);
+	post_request(tx, req, rq_size);
+	return wait_for_reply(rx);
+}
+
+static struct kmem_cache *mfs_inode_cachep;
+
+static struct inode *mfs_alloc_inode(struct super_block *sb)
+{
+	return kmem_cache_alloc(mfs_inode_cachep, GFP_KERNEL);
+}
+
+static void mfs_destroy_inode(struct inode *inode)
+{
+	kmem_cache_free(mfs_inode_cachep, inode);
+}
+
+static struct dentry *mfs_lookup(struct inode *dir,
+				 struct dentry *dentry, unsigned int dummy)
+{
+	unsigned size = sizeof(struct lookup_req) + dentry->d_name.len;
+	unsigned char buf[size];
+	struct lookup_req *req = (struct lookup_req *) buf;
+	struct inode_rep rep;
+	struct inode *inode = NULL;
+	struct dentry *res = NULL;
+	unsigned ret;
+
+	req->id = MFS_ID(dir->i_sb);
+	req->cmd = CMD_LOOKUP;
+	req->parent_ino = dir->i_ino;
+	memcpy(req->name, dentry->d_name.name, dentry->d_name.len);
+
+	rep.status = -EINVAL;
+	ret = send_request(req, size, &rep, sizeof(rep));
+	if (ret == sizeof(rep) && rep.status == 0)
+		inode = mfs_new_inode(dir->i_sb, &rep);
+	d_add(dentry, inode);
+	return res;
+}
+
+static int mfs_create_file(struct inode *dir, struct dentry *dentry,
+			   int mode, dev_t dev)
+{
+	unsigned size = sizeof(struct create_req) + dentry->d_name.len;
+	unsigned char buf[size];
+	struct create_req *req = (struct create_req *) buf;
+	struct inode_rep rep;
+	struct inode *inode = NULL;
+	unsigned ret;
+
+	req->id = MFS_ID(dir->i_sb);
+	req->cmd = CMD_CREATE;
+	req->parent_ino = dir->i_ino;
+	req->mode = mode;
+	req->dev = (unsigned) dev;
+	memcpy(req->name, dentry->d_name.name, dentry->d_name.len);
+
+	rep.status = -EINVAL;
+	ret = send_request(req, size, &rep, sizeof(rep));
+	if (ret < sizeof(rep))
+		return rep.status;
+
+	inode = mfs_new_inode(dir->i_sb, &rep);
+	d_instantiate(dentry, inode);
+	return 0;
+}
+
+static int mfs_create(struct inode *dir, struct dentry *dentry, umode_t mode,
+		      bool dummy)
+{
+	return mfs_create_file(dir, dentry, mode, MKDEV(0, 0));
+}
+
+static int mfs_unlink(struct inode *dir, struct dentry *dentry)
+{
+	unsigned size = sizeof(struct unlink_req) + dentry->d_name.len;
+	unsigned char buf[size];
+	struct unlink_req *req = (struct unlink_req *) buf;
+	int err = -EINVAL;
+    
+	req->id = MFS_ID(dir->i_sb);
+	req->cmd = CMD_UNLINK;
+	req->parent_ino = dir->i_ino;
+	memcpy(req->name, dentry->d_name.name, dentry->d_name.len);
+
+	send_request(req, size, &err, sizeof(err));
+	return err;
+}
+
+static int mfs_symlink(struct inode *dir, struct dentry *dentry,
+		       const char *target)
+{
+	unsigned tlen = strlen(target);
+	unsigned size = sizeof(struct symlink_req) + dentry->d_name.len + tlen;
+	unsigned char buf[size];
+	struct symlink_req *req = (struct symlink_req *) buf;
+	struct inode_rep rep;
+	struct inode *inode = NULL;
+	unsigned ret;
+    
+	req->id = MFS_ID(dir->i_sb);
+	req->cmd = CMD_SYMLINK;
+	req->parent_ino = dir->i_ino;
+	req->namelen = dentry->d_name.len;
+	memcpy(req->names, dentry->d_name.name, dentry->d_name.len);
+	memcpy(req->names + req->namelen, target, tlen);
+
+	rep.status = -EINVAL;
+	ret = send_request(req, size, &rep, sizeof(rep));
+	if (ret < sizeof(rep))
+		return rep.status;
+
+	inode = mfs_new_inode(dir->i_sb, &rep);
+	d_instantiate(dentry, inode);
+	return 0;
+}
+
+static int mfs_link(struct dentry *old_dentry, struct inode *dir,
+		    struct dentry *dentry)
+{
+	unsigned size = sizeof(struct hlink_req) + dentry->d_name.len;
+	unsigned char buf[size];
+	struct hlink_req *req = (struct hlink_req *) buf;
+	struct inode_rep rep;
+	unsigned ret;
+    
+	req->id = MFS_ID(dir->i_sb);
+	req->cmd = CMD_HLINK;
+	req->parent_ino = dir->i_ino;
+	req->ino = old_dentry->d_inode->i_ino;
+	memcpy(req->name, dentry->d_name.name, dentry->d_name.len);
+
+	rep.status = -EINVAL;
+	ret = send_request(req, size, &rep, sizeof(rep));
+	if (ret < sizeof(rep))
+		return rep.status;
+
+	mfs_update_inode(old_dentry->d_inode, &rep);
+
+	atomic_inc(&old_dentry->d_inode->i_count);
+	d_instantiate(dentry, old_dentry->d_inode);
+	return 0;
+}
+
+static int mfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
+{
+	return mfs_create_file(dir, dentry, mode | S_IFDIR, MKDEV(0, 0));
+}
+
+static int mfs_rmdir(struct inode *dir, struct dentry *dentry)
+{
+	return mfs_unlink(dir, dentry);
+}
+
+static int mfs_mknod(struct inode *dir, struct dentry *dentry, umode_t mode,
+		     dev_t rdev) {
+	return mfs_create_file(dir, dentry, mode, rdev);
+}
+
+static int mfs_rename(struct inode *old_dir, struct dentry *old_dentry,
+		      struct inode *new_dir, struct dentry *new_dentry)
+{
+	unsigned size = sizeof(struct rename_req) +
+	    old_dentry->d_name.len + new_dentry->d_name.len;
+	unsigned char buf[size];
+	struct rename_req *req = (struct rename_req *) buf;
+	int err = -EINVAL;
+    
+	req->id = MFS_ID(old_dir->i_sb);
+	req->cmd = CMD_RENAME;
+	req->old_parent_ino = old_dir->i_ino;
+	req->new_parent_ino = new_dir->i_ino;
+	req->old_namelen = old_dentry->d_name.len;
+	memcpy(req->names, old_dentry->d_name.name, old_dentry->d_name.len);
+	memcpy(req->names + req->old_namelen,
+	       new_dentry->d_name.name, new_dentry->d_name.len);
+
+	send_request(req, size, &err, sizeof(err));
+	return err;
+}
+
+static int mfs_readdir(struct file *file, struct dir_context *ctx)
+{
+	struct readdir_req req;
+	struct readdir_rep *rep;
+	struct dirnode *dn;
+	unsigned len;
+	int res = -EINVAL;
+
+	rep = kmalloc(PAGE_SIZE, GFP_KERNEL);
+	if (!rep)
+		return -ENOMEM;
+
+	req.id = MFS_ID(file->f_dentry->d_inode->i_sb);
+	req.cmd = CMD_READDIR;
+	req.ino = file->f_dentry->d_inode->i_ino;
+	req.offset = ctx->pos;
+	req.size = PAGE_SIZE;
+
+	len = send_request(&req, sizeof(req), rep, PAGE_SIZE);
+	if (len <= sizeof(*rep)) {
+		if (len >= sizeof(int))
+			res = rep->status;
+		goto eod;
+	}
+	
+	dn = rep->entries;
+	res = 0;
+	while ((char *) dn + sizeof(struct dirnode) < (char *) rep + len) {
+		if ((char *) dn + dn->len > (char *) rep + len)
+			break;
+		if (!dir_emit(ctx, dn->name, dn->len - sizeof(struct dirnode),
+				dn->ino, dn->type))
+			break;
+		++res;
+		dn = (struct dirnode *) ((unsigned char *) dn + dn->len);
+	}
+	ctx->pos = rep->offset;
+
+  eod:
+	kfree(rep);
+	return res;
+}
+
+static int mfs_readpage(struct file *file, struct page *page)
+{
+	struct readpage_req req;
+	void *buf;
+	int res = -EIO;
+	unsigned len;
+	unsigned tx;
+	unsigned rx;
+
+	buf = kmap(page);
+	if (!buf)
+		goto err_out;
+
+	req.id = MFS_ID(file->f_dentry->d_inode->i_sb);
+	req.cmd = CMD_READPAGE;
+	req.ino = file->f_dentry->d_inode->i_ino;
+	req.offset = page_offset(page);
+	req.size = PAGE_SIZE;
+
+	start_new_request(&tx, 1, &rx, 2);
+	prepare_receive(rx, &res, sizeof(res));
+	prepare_receive(rx + 1, buf, PAGE_SIZE);
+	post_request(tx, &req, sizeof(req));
+
+	if (wait_for_reply(rx) < sizeof(res)) {
+		res = -EINVAL;
+		goto err_out;
+	}
+	if (res) {
+		memset(buf, 0, PAGE_SIZE);
+		SetPageError(page);
+		goto err_buf;
+	}
+	len = wait_for_reply(rx + 1);
+
+	memset(buf + len, 0, PAGE_SIZE - len);
+	SetPageUptodate(page);
+
+  err_buf:
+	kunmap(page);
+	flush_dcache_page(page);
+  err_out:
+	unlock_page(page);
+	return res;
+}
+
+static int mfs_write_begin(struct file *file, struct address_space *mapping,
+			   loff_t pos, unsigned len, unsigned flags,
+			   struct page **pagep, void **fsdata)
+{
+	pgoff_t index = pos >> PAGE_CACHE_SHIFT;
+
+	*pagep = grab_cache_page_write_begin(mapping, index, flags);
+	if (!*pagep)
+		return -ENOMEM;
+
+	// FIXME: do prereading
+
+	return 0;
+}
+
+static int mfs_write_end(struct file *file, struct address_space *mapping,
+			 loff_t pos, unsigned blen, unsigned copied,
+			 struct page *page, void *fsdata)
+{
+	struct inode *i = file->f_dentry->d_inode;
+	struct writepage_req req;
+	void *buf;
+	int len = -EFAULT;
+	unsigned tx;
+	unsigned rx;
+	unsigned size;
+
+	flush_dcache_page(page);
+
+	buf = kmap(page);
+	if (!buf)
+		return -EINVAL;
+
+	req.id = MFS_ID(i->i_sb);
+	req.cmd = CMD_WRITEPAGE;
+	req.ino = file->f_dentry->d_inode->i_ino;
+	req.offset = pos;
+	req.size = blen;
+
+	start_new_request(&tx, 2, &rx, 1);
+	prepare_receive(rx, &len, sizeof(len));
+	post_request(tx, &req, sizeof(req));
+	post_request(tx + 1, buf + (pos & (PAGE_CACHE_SIZE - 1)), blen);
+	wait_for_reply(rx);
+
+	if (len >= 0) {
+		if (len != blen) {
+			SetPageError(page);
+			ClearPageUptodate(page);
+		} else {
+			SetPageUptodate(page);
+		}
+
+		size = req.offset + len;
+		if (size > i_size_read(i)) i_size_write(i, size);
+	}
+
+	kunmap(page);
+	unlock_page(page);
+	page_cache_release(page);
+	return len;
+}
+
+static int mfs_fsync(struct file *file, loff_t start, loff_t end, int datasync)
+{
+ 	struct inode *inode = file->f_mapping->host;
+	struct fsync_req req;
+	int err;
+
+	err = filemap_write_and_wait_range(inode->i_mapping, start, end);
+	if (err)
+		return err;
+
+	req.id = MFS_ID(file->f_mapping->host->i_sb);
+	req.cmd = CMD_FSYNC;
+	req.ino = file->f_mapping->host->i_ino;
+
+	err = -EINVAL;
+	send_request(&req, sizeof(req), &err, sizeof(err));
+	return err;
+}
+
+static void *mfs_follow_link(struct dentry *dentry, struct nameidata *nd)
+{
+	struct readlink_req req;
+	struct readlink_rep *rep;
+	int len;
+
+	rep = kmalloc(256, GFP_KERNEL);
+	if (!rep)
+		return ERR_PTR(-ENOMEM);
+
+	req.id = MFS_ID(dentry->d_inode->i_sb);
+	req.cmd = CMD_READLINK;
+	req.ino = dentry->d_inode->i_ino;
+	
+	rep->status = -EINVAL;
+	len = send_request(&req, sizeof(req), rep, 255);
+	if (len < sizeof(*rep) + 1) {
+		kfree(rep);
+		return ERR_PTR(rep->status);
+	}
+
+	*((char *) rep + len) = 0;
+	nd_set_link(nd, rep->target);
+	return NULL;
+}
+
+static void mfs_put_link(struct dentry *direntry,
+			 struct nameidata *nd, void *cookie)
+{
+	char *p = nd_get_link(nd);
+
+	if (!IS_ERR(p))
+		kfree(p - sizeof(struct readlink_rep));
+}
+
+static int mfs_setattr(struct dentry *dentry, struct iattr *attr)
+{
+	struct setinode_req req;
+	struct inode_rep rep;
+	struct inode *i = dentry->d_inode;
+	unsigned ia = attr->ia_valid;
+	unsigned len;
+
+	req.id = MFS_ID(i->i_sb);
+	req.cmd = CMD_SETINODE;
+	req.ino = i->i_ino;
+	req.mode = ia & ATTR_MODE ? attr->ia_mode : i->i_mode;
+	req.uid = ia & ATTR_UID ? attr->ia_uid.val : i->i_uid.val;
+	req.gid = ia & ATTR_GID ? attr->ia_gid.val : i->i_gid.val;
+	req.size = ia & ATTR_SIZE ? attr->ia_size : i->i_size;
+
+	len = send_request(&req, sizeof(req), &rep, sizeof(rep));
+	if (len < sizeof(rep))
+		return -EINVAL;
+	    
+	if (rep.status)
+		return rep.status;
+
+	mfs_update_inode(i, &rep);
+	return 0;
+}
+
+static const struct file_operations mfs_dir_fops = {
+	.read		= generic_read_dir,
+	.iterate	= mfs_readdir,
+};
+
+static const struct inode_operations mfs_dir_ops = {
+	.lookup		= mfs_lookup,
+	.create		= mfs_create,
+	.link		= mfs_link,
+	.unlink		= mfs_unlink,
+	.symlink	= mfs_symlink,
+	.mkdir		= mfs_mkdir,
+	.rmdir		= mfs_rmdir,
+	.mknod		= mfs_mknod,
+	.rename		= mfs_rename,
+	.setattr	= mfs_setattr,
+};
+
+static const struct inode_operations mfs_file_ops = {
+	.setattr	= mfs_setattr,
+};
+
+static const struct file_operations mfs_fops = {
+	.llseek		= generic_file_llseek,
+	.read		= new_sync_read,
+	.write		= new_sync_write,
+	.read_iter	= generic_file_read_iter,
+	.write_iter	= generic_file_write_iter,
+	.mmap		= generic_file_readonly_mmap,
+	.splice_read	= generic_file_splice_read,
+	.fsync		= mfs_fsync,
+};
+
+static const struct address_space_operations mfs_aops = {
+	.readpage	= mfs_readpage,
+	.write_begin	= mfs_write_begin,
+	.write_end	= mfs_write_end,
+};
+
+static const struct inode_operations mfs_link_ops = {
+	.readlink	= generic_readlink,
+	.follow_link	= mfs_follow_link,
+	.put_link	= mfs_put_link,
+	.setattr	= mfs_setattr,
+};
+
+static void mfs_update_inode(struct inode *i, struct inode_rep *rep)
+{
+	i->i_ino = rep->ino;
+	i->i_mode = rep->mode;
+	set_nlink(i, rep->nlink);
+	i->i_uid.val = rep->uid;
+	i->i_gid.val = rep->gid;
+	i->i_size = rep->size;
+	i->i_atime.tv_sec = rep->atime.sec;
+	i->i_atime.tv_nsec = rep->atime.nsec;
+	i->i_mtime.tv_sec = rep->mtime.sec;
+	i->i_mtime.tv_nsec = rep->mtime.nsec;
+	i->i_ctime.tv_sec = rep->ctime.sec;
+	i->i_ctime.tv_nsec = rep->ctime.nsec;
+	i->i_blkbits = ffs(rep->blksize);
+	i->i_blocks = rep->blocks;
+
+	if (i->i_sb->s_flags & MS_RDONLY)
+		i->i_mode &= ~0222;
+}
+
+static struct inode *mfs_new_inode(struct super_block *sb,
+				   struct inode_rep *rep)
+{
+	struct inode *i = new_inode(sb);
+	if (!i) return NULL;
+
+	mfs_update_inode(i, rep);
+
+	if (S_ISREG(rep->mode)) {
+		i->i_op = &mfs_file_ops;
+		i->i_fop = &mfs_fops;
+		i->i_data.a_ops = &mfs_aops;
+	} else if (S_ISDIR(rep->mode)) {
+		i->i_op = &mfs_dir_ops;
+		i->i_fop = &mfs_dir_fops;
+	} else if (S_ISLNK(rep->mode)) {
+		i->i_op = &mfs_link_ops;
+	} else {
+		init_special_inode(i, rep->mode, (dev_t) rep->rdev);
+	}
+
+	insert_inode_hash(i);
+	return i;
+}
+
+static struct inode *mfs_getinode(struct super_block *sb,
+				  unsigned long long ino)
+{
+	struct getinode_req req;
+	struct inode_rep rep;
+	unsigned len;
+
+	req.id = MFS_ID(sb);
+	req.cmd = CMD_GETINODE;
+	req.ino = ino;
+	len = send_request(&req, sizeof(req), &rep, sizeof(rep));
+
+	if (len < sizeof(rep) || rep.status)
+		return NULL;
+
+	return mfs_new_inode(sb, &rep);
+}
+
+static void mfs_put_super(struct super_block *sb)
+{
+}
+
+static int mfs_statfs(struct dentry *dentry, struct kstatfs *buf)
+{
+	struct statfs_req req;
+	struct statfs_rep rep;
+	struct super_block *sb = dentry->d_sb;
+	unsigned len;
+
+	req.id = MFS_ID(sb);
+	req.cmd = CMD_STATFS;
+	rep.status = -EINVAL;
+	len = send_request(&req, sizeof(req), &rep, sizeof(rep));
+
+	if (len < sizeof(rep) || rep.status)
+		return rep.status;
+
+	buf->f_type = sb->s_magic;
+	buf->f_bsize = 512;
+	buf->f_blocks = rep.blocks;
+	buf->f_bfree = rep.bfree;
+	buf->f_bavail = rep.bfree;
+	buf->f_namelen = 255;
+
+	return 0;
+}
+
+static const struct super_operations mfs_ops = {
+	.alloc_inode	= mfs_alloc_inode,
+	.destroy_inode	= mfs_destroy_inode,
+	.put_super	= mfs_put_super,
+	.statfs		= mfs_statfs,
+};
+
+static int mfs_fill_super(struct super_block *sb, void *data, int silent)
+{
+	struct inode *root;
+	unsigned id;
+
+	if (*(char *) data == '/') ++data;
+	id = simple_strtoul((char *) data, NULL, 10);
+
+	sb->s_magic = 0xdeadbeef;
+	sb->s_op = &mfs_ops;
+	if (id == 0)
+		sb->s_flags |= MS_RDONLY;
+	sb->s_fs_info = (void *) id;
+
+	root = mfs_getinode(sb, 0);
+	if (!root)	    
+		goto out;
+
+	sb->s_root = d_make_root(root);
+	if (!sb->s_root)
+		goto outiput;
+
+	return 0;
+
+  outiput:
+	iput(root);
+  out:
+	return -EINVAL;
+}
+
+static struct dentry *mfs_mount(struct file_system_type *fs_type, int flags,
+				const char *dev_name, void *data)
+{
+	return mount_nodev(fs_type, flags, (void *) dev_name, mfs_fill_super);
+}
+
+static struct file_system_type mfs_fs_type = {
+	.owner		= THIS_MODULE,
+	.name		= "metafs",
+	.mount		= mfs_mount,
+	.kill_sb	= kill_block_super,
+	.fs_flags	= FS_REQUIRES_DEV,
+};
+
+static void init_once(void *foo)
+{
+	struct inode * inode = (struct inode *) foo;
+
+	inode_init_once(inode);
+}
+
+static int __init init_mfs_fs(void)
+{
+	unsigned i;
+	int err;
+
+	if (vm_running() != 0)
+		return 0;
+
+	printk("MFS init\n");
+	mfs_inode_cachep = kmem_cache_create("metafs_inode_cache",
+					     sizeof(struct inode),
+					     0, (SLAB_RECLAIM_ACCOUNT|
+						 SLAB_MEM_SPREAD),
+					     init_once);
+	if (!mfs_inode_cachep)
+		return -ENOMEM;
+
+	for (i = 0; i < BUF_COUNT; ++i) {
+		tx_descr[i].addr = 0;
+		tx_descr[i].size = 0;
+		tx_descr[i].next = (unsigned) &tx_descr[i + 1];
+
+		rx_descr[i].addr = 0;
+		rx_descr[i].size = DONE;
+		rx_descr[i].next = (unsigned) &rx_descr[i + 1];
+	}
+	tx_descr[BUF_COUNT - 1].next = (unsigned) &tx_descr[0];
+	rx_descr[BUF_COUNT - 1].next = (unsigned) &rx_descr[0];
+	
+	vm_create_queue(2, -1u,
+			(unsigned) &tx_descr[0], (unsigned) &rx_descr[0]);
+
+        err = register_filesystem(&mfs_fs_type);
+	if (err != 0) {
+		kmem_cache_destroy(mfs_inode_cachep);
+		return err;
+	}
+
+	return 0;
+}
+
+static void __exit exit_mfs_fs(void)
+{
+	unregister_filesystem(&mfs_fs_type);
+	kmem_cache_destroy(mfs_inode_cachep);
+}
+
+module_init(init_mfs_fs);
+module_exit(exit_mfs_fs);
Index: linux-3.18.43/fs/metafs/Kconfig
===================================================================
--- /dev/null
+++ linux-3.18.43/fs/metafs/Kconfig
@@ -0,0 +1,3 @@
+config META_FS
+	depends on METAROUTER || MIPS_MIKROTIK
+	tristate "MetaFS on Mikrotik MetaRouters"
Index: linux-3.18.43/fs/metafs/Makefile
===================================================================
--- /dev/null
+++ linux-3.18.43/fs/metafs/Makefile
@@ -0,0 +1,3 @@
+obj-y += metafs.o
+
+metafs-objs := inode.o
